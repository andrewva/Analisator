Лекция 1. Платформа Microsoft .Net Framework 2.0	4
1.2 Понятия приложения, проекта, решения	5
1.3 Среда разработки Visual Studio .Net	5
1.4 Создание первого проекта	6
1. 5 Компиляция и выполнение программы в среде CLR	9
Лекция 2. Состав языка С#	12
2.1 Основы технологии ООП	12
2.2 Состав языка	13
2.3 Типы данных	14
2.4 Переменные и константы	15
2.5 Организация ввода-вывода данных. Форматирование	17
Лекция 3. Операции языка С#	22
3.1 Некоторые операции С#	22
3.2 Выражения и преобразование типов	26
3.3 Перечень операций	27
3.4 Математические функции языка С#	28
Лекция 4. Операторы языка C#	30
4.1 Операторы следования	30
4.2 Операторы ветвления	30
4.3 Операторы цикла	34
4.4 Операторы безусловного перехода	37
Самостоятельная работа	40
Лекция 5. Методы: основные понятия. Перегрузка методов	41
5.1 Методы: основные понятия	41
5.2 Перегрузка методов	45
Самостоятельная работа	47
Лекция 6. Рекурсивные методы	50
6.1 Прямая рекурсия	50
6.2 Косвенная рекурсия	56
Самостоятельная работа	57
Лекция 7. Обработка исключений	58
7.1 Оператор try	58
7.2 Операторы checked и unchecked	61
Самостоятельная работа	67
Лекция 8. Массивы	71
8.1 Одномерные массивы	71
8.2 Массив как параметр	73
8.3 Массив как объект	73
8.4 Многомерные массивы	75
8.5 Ступенчатые массивы	77
8.6 Оператор foreach и его использование при работе с массивами	78
Самостоятельная работа	83
Лекция 9. Символы и строки	92
9.1 Символы char	92
9.2 Неизменяемые строки string	93
9.3 Изменяемые строки	98
Самостоятельная работа. Работа с командной строкой.	102
Лекция 10. Регулярные выражения	106
10.1 Метасимволы в регулярных выражениях	106
10.2 Поиск в тексте по шаблону	108
10.3 Редактирование текста	110
Самостоятельная работа	111
Практическое задание	111
Лекция 11. Организация С#-системы ввода-вывода	113
11.1 Байтовый поток	113
11.2 Символьный поток	115
11.3 Двоичные потоки	118
11.4 Перенаправление стандартных потоков	120
Самостоятельная работа	123
Лекция 12. Работа с файловой системой	124
12.1.Работа с файловой системой: классы Directory и Filе и классы DirectoryInfo и FileInfo	124
12.2 Класс FileSystemInfo	124
12.3 Класс DirectoryInfo	124
12.4 Класс Directory	127
12.2 Работа с файлами	127
Самостоятельная работа	132
Лекция 13. Классы	133
13.2 Данные: поля и константы	135
13.3 Методы	136
13.5 Свойства	140
13.6 Один класс - один файл	142
Самостоятельная работа	144
13.7. Классы: деструкторы, индексаторы	144
13.8 Операции класса	148
Самостоятельная работа	155
Лекция 14. Нследование классов, иерархия классов	156
14.1 Иерархия и наследование	156
14.2 Наследование конструкторов	158
14.3 Многоуровневая иерархия	162
14.4 Переменные базового класса и производного класса	164
14.5 Виртуальные методы	165
14.6 Абстрактные методы и классы	166
14.7 Запрет наследования	168
Лекция 15. Интерфейсы и структуры	169
15.1. Пользовательские и стандартные интерфейсы	169
15.2 Стандартные интерфейсы .Net	172
15.3 Структуры	174
Самостоятельная работа	177
Лекция 16. Коллекции	180
16.1. Классификация коллекций.	180
16.2 Коллекции общего назначения	180
16.3 Класс Stack	181
16.4 Класс Queue	183
16.5 Класс ArrayList	185
16.6 Класс Hashtable	190
Самостоятельная работа	193
Лекция 17. Организация интерфейса windows-приложений.	193
17.1 Струткура простейшего windows-приложения	193
17.2 Элементы управления на форме	195
17.3 Обработка событий	197
17.4 Работа с элементами управления	198
17.5 Кнопки	199
17.6 Работа с элементами управления в режиме работы приложения	202
17.7 Работа со списками: ListBox, ComboBox, NumericUpDown	203
17.8 Работа с переключателями: RadioButton, CheckBox	207
Лекция 18. Графика в windows-приложениях	211
18.1 Рисование в форме	211
18.2 Работа с изображениями	214
 
Лекция 1. Платформа Microsoft .Net Framework 2.0
Совокупность средств, с помощью которых программы пишутся, корректируются, преобразуются в машинные коды, отлаживаются и запускаются, называют средой разработки или оболочкой. Платформа .Net или .Net Framework– это больше чем просто среда разработки программ, это новое революционное объединение ранее разрозненных технологий компанией Microsoft, которые позволяют разрабатывать разнотипные приложения на различных языках программирования под различные операционные системы.
.NET Framework является надстройкой над операционной системой, в качестве которой может выступать любая версия Windows, Unix и вообще любая ОС (по заверению разработчиков), и состоит из ряда компонентов. Так, .NET Framework включает в себя:
1.	Четыре официальных языка: С#, VB.NET, Managed C++ и JScript .NET. 
2.	Общеязыковую объектно-ориентированную среду выполнения CLR (Common Language Runtime), совместно используемую этими языками для создания приложений. 
3.	Ряд связанных между собой библиотек классов под общим именем FCL (Framework Class Library). 
Основным компонентом платформы .NET Framework является общеязыковая среда выполнения программ CLR. Название среды – "общеязыковая среда выполнения" - говорит само за себя: это исполняющая среда, которая подходит для различных языков программирования. К функциям CLR относятся:
1.	двухшаговая компиляция: преобразование программы, написанной на одном из языков программирования в управляемый код на промежуточном языке (Microsoft Intermediate Language, MSIL, или просто IL), а затем преобразование IL-кода в машинный код конкретного процессора, который выполняется с помощью виртуальной машины или JIT-компилятора (Just In Time compiler - компилирование точно к нужному моменту); 
2.	управление кодом: загрузка и выполнение уже готового IL-кода с помощью JIT-компилятора; 
3.	осуществление доступа к метаданным с целью проверки безопасности кода; 
4.	управление памятью при размещении объектов с помощью сборщика мусора (Garbage Collector); 
5.	обработка исключений и исключительных ситуаций, включая межъязыковые исключения; 
6.	осуществление взаимодействия между управляемым кодом (код, созданный для СLR) и неуправляемым кодом; 
7.	поддержка сервисов для разработки разнотипных приложений. 
Следующим компонентом .Net Framework является FCL – библиотека классов платформы. Эта библиотека разбита на несколько модулей таким образом, что имеется возможность использовать ту или иную ее часть в зависимости от требуемых результатов. Так, например, в одном из модулей содержатся "кирпичики", из которых можно построить Windows-приложения, в другом — "кирпичики", необходимые для организации работы в сети и т.д. 
Часть FCL посвящена описанию базисных типов. Тип — это способ представления данных; определение наиболее фундаментальных из них облегчает совместное использование языков программирования с помощью .NET Framework. Все вместе это называется Common Type System (CTS — единая система типов). 
Кроме того, библиотека FCL включает в себя Common Language Specification (CLS – общая языковая спецификация), которая устанавливает: основные правила языковой интеграции. Спецификация CLS определяет минимальные требования, предъявляемые к языку платформы .NET. Компиляторы, удовлетворяющие этой спецификации, создают объекты, способные взаимодействовать друг с другом. Поэтому любой язык, соответствующий требованиям CLS, может использовать все возможности библиотеки FCL.
Как уже отмечалось, основными языками, предназначенными для платформы .NET Framework, являются С#, VB.NET, Managed C++ и JScript .NET. Для данных языков Microsoft предлагает собственные компиляторы, переводящие программу в IL-код, который выполняется JIT-компилятором среды CLR. Кроме Microsoft, еще несколько компаний и академических организаций создали свои собственные компиляторы, генерирующие код, работающий в CLR. На сегодняшний момент известны компиляторы для Pascal, Cobol, Lisp, Perl, Prolog и т.д. Это означает, что можно написать программу, например, на языке Pascal, а затем, воспользовавшись соответствующим компилятором, создать управляемый код, который будет работать в среде CLR.
1.2 Понятия приложения, проекта, решения
.NET Framework не налагает никаких ограничений на возможные типы создаваемых приложений. Тем не менее, давайте рассмотрим некоторые наиболее часто встречающиеся типы приложений:
1.	Консольные приложения позволяют выполнять вывод на "консоль", то есть в окно командного процессора. 
2.	Windows-приложения, использующие элементы интерфейса Windows, включая формы, кнопки, флажки и т.д. 
3.	Web-приложения представляют собой web-страницы, которые могут просматриваться любым web-браузером. 
4.	Web-сервисы представляют собой распределенные приложения, которые позволяют обмениваться по Интернету практически любыми данными с использованием единого синтаксиса независимо от того, какой язык программирования применялся при создании web-службы и на какой системе она размещена. 
Приложение, находящееся в процессе разработки, называется проектом. Несколько приложений могут быть объединены в решение (solution). 
Удобной средой разработки приложений является Visual Studio .Net.
1.3 Среда разработки Visual Studio .Net
В данном курсе мы будем изучать язык С#. Знакомство с языком начнем с разработки консольных приложений. В качестве среды разработки мы будем использовать Visual Studio .Net (VS).
Можно создавать файлы с исходным кодом на С# с помощью обычного текстового редактора, например, Блокнота, и компилировать их в управляемые модули с помощью компилятора командной строки, который является составной частью .NET Framework. Однако наиболее удобно для этих целей использовать VS, потому что:
1.	VS автоматически выполняет все шаги, необходимые для компиляции исходного кода. 
2.	Текстовый редактор VS настроен для работы с теми языками, которые поддерживаются VS, например С#, поэтому он может интеллектуально обнаруживать ошибки и подсказывать в процессе ввода, какой именно код необходим. 
3.	В состав VS входят программы, позволяющие создавать Windows- и Web-приложения путем простого перетаскивания мышью элементов пользовательского интерфейса. 
4.	Многие типы проектов, создание которых возможно на С#, могут разрабатываться на основе "каркасного" кода, заранее включаемого в программу. Вместо того чтобы каждый раз начинать с нуля, VS позволяет использовать уже имеющиеся файлы с исходным кодом, что уменьшает временные затраты на создание проекта. 
1.4 Создание первого проекта
Для создания проекта следует запустить VS, а затем в главном меню VS выбрать команду File – New - Project . После чего откроется диалоговое меню New Project (см. рис.1.1).
 

Рис. 1.1.  
В поле Project types следует выбрать Visual C#, в поле Templates – Console Application. 
В строчке Name введите имя приложения Hello. Обратите внимание на то, что это же имя появится в строчке Solution Name. Уберите галочку в поле Create directory for Application (пока мы создаем простое приложение, и нам нет необходимости усложнять его структуру).
В строке Location определите положение на диске, куда нужно сохранять ваш проект. И нажмите кнопку OK. Примерный вид экрана изображен на рис 1.2
 

Рис. 1.2.  
В правой верхней части располагается окно управления проектом Solution Explorer. Если оно закрыто, то его можно включить командой View - Solution Explorer. В этом окне перечислены все ресурсы, входящие в проект:
1.	AssemblyInfo.cs – информация о сборке. 
Компилятор в качестве результата своего выполнения создает так называемую сборку – файл с расширением exe или dll, который содержит IL-код и метаданные. 
2.	System, System.Data, System.Xml – ссылки на стандартные библиотеки. 
3.	Program.cs - текст программы на языке C#. 
Замечание. В других версиях VS сюда же включается файл с расширением ico, отвечающий за вид ярлыка приложения. 
В правой нижней части экрана располагается окно свойств Properties. Если оно закрыто, то его можно включить командой View - Properties. В этом окне отображаются важнейшие характеристики выделенного элемента.
Основное пространство экрана занимает окно редактора, в котором располагается текст программы, созданный средой автоматически. Текст представляет собой каркас, в который программист будет добавлять нужный код. При этом зарезервированные слова отображаются синим цветом, комментарии – зеленым, основной текст – черным. 
Текст структурирован. Щелкнув на знак минус, мы скроем блок кода, щелкнув на знаке плюс – откроем.
Откроем папку, содержащую проект, и рассмотрим ее структуру (см. рис.1.3). Файлы, выделенные жирным шрифтом, появятся только после компиляции.
 

Рис. 1.3.  
На данном этапе особый интерес для нас будут представлять следующие файлы:
1.	Hello.sln – основной файл, отвечающий за весь проект. Если необходимо открыть проект для редактирования, то нужно выбрать именно этот файл. Остальные файлы откроются автоматически. 
2.	Program.cs – файл, в котором содержится исходный код - код, написанный на языке С#. Именно с этим файлом мы и будем непосредственно работать. 
3.	Hello.exe – файл, в котором содержатся сгенерированный IL-код и метаданные проекта. Другими словами, этот файл и есть готовое приложение, которое может выполняться на любом компьютере, на котором установлена платформа .Net. 
Теперь рассмотрим сам текст программы.
using System – это директива, которая разрешает использовать имена стандартных классов из пространства имен System непосредственно без указания имени пространства, в котором они были определены. 
Ключевое слово namespace создает для проекта свое собственное пространство имен, которое по умолчанию называется именем проекта. В нашем случае пространство имен называется Hello. Однако программист вправе указать другое имя. Пространство имен ограничивает область применения имен, делая его осмысленным только в рамках данного пространства. Это сделано для того, чтобы можно было давать имена программным объектам, не заботясь о том, что они совпадут с именами в других приложениях. Таким образом, пространства имен позволяют избегать конфликта имен программных объектов, что особенно важно при взаимодействии приложений. 
С# - объектно-ориентированный язык, поэтому написанная на нем программа будет представлять собой совокупность взаимодействующих между собой классов. Автоматически был создан класс с именем Program (в других версиях среды может создаваться класс с именем Class1).
Данный класс содержит только один метод - метод Main(). Метод Main() является точкой входа в программу, т.е. именно с данного метода начнется выполнение приложения. Каждая программа на языке С# должна иметь метод Main ().
Замечание. Технически возможно иметь несколько методов Main() в одной программе, в этом случае потребуется с помощью параметра командной строки сообщить компилятору С#, какой именно метод Main() является точкой входа в программу. 
Метод Main() имеет одну важную особенность. Перед объявлением типа возвращаемого значения void (который означает, что метод не возвращает значение) стоит ключевое слово static, которое означает что метод Main() можно вызывать, не создавая объект типа Program.
Замечание. В некоторых версиях требуется, чтобы перед словом static стояло слово public. 
Добавим в метод следующий код:
Console.WriteLine("Hello!");
Здесь Console имя стандартного класса из пространства имен System. Его метод WriteLine выводит на экран текст, заданный в кавычках
Для запуска программы следует нажать клавишу F5 или выполнить команду Debug-Start Debugging. Если программа выполнена без ошибок, то сообщение выведется в консольное окно, которое мелькнет и быстро закроется. Чтобы просмотреть сообщение в нормальном режиме нужно нажать клавиши Ctrl+F5 или выполнить команду Debug-Start Without Debugging. В нашем случае откроется следующее консольное окно:
 
Если код программы будет содержать ошибки, например, пропущена точка с запятой после команды вывода, то после нажатия клавиши F5 откроется диалоговое окно, в котором выведется сообщение о том, что обнаружена ошибка, и вопрос, продолжать ли работу дальше. Если вы ответите Yes, то будет выполнена предыдущая удачно скомпилированная версия программы. Иначе процесс будет остановлен и управление передано окну списка ошибок Error List. 
Задание. Измените текст кода так, чтобы на экран выводилось сообщение: Ура!!!Сегодня информатика!!! 
1. 5 Компиляция и выполнение программы в среде CLR
В прошлом почти все компиляторы генерировали код для конкретных процессорных архитектур. Все CLR-совместимые компиляторы вместо этого генерируют IL-код, который также называется управляемым модулем, потому что CLR управляет его жизненным циклом и выполнением. Рассмотрим составные части управляемого модуля:
1.	Заголовок PE32 или PE32+: Файл с заголовком в формате PE32 может выполняться в 32- или 64-разрядной ОС, а с заголовком PE32+ только в 64-разрядной ОС. Заголовок показывает тип файла: GUI, CUI или DLL, он также имеет временную метку, показывающую, когда файл был собран. Для модулей, содержащих только IL-код, основной объем информации в РЕ-заголовке игнорируется, Для модулей, содержащих процессорный код, этот заголовок содержит сведения о процессорном коде. 
2.	Заголовок CLR: Содержит информацию, которая превращает этот модуль в управляемый. Заголовок включает нужную версию СLR, некоторые флаги, метку метаданных, точки входа в управляемый модуль (метод Main), месторасположение и размер метаданных модуля, ресурсов и т.д. 
3.	Метаданные - это набор таблиц данных, описывающих то, что определено в модуле. Есть два основных вида таблиц: описывающие типы и члены, определенные в вашем исходном коде, и описывающие типы и члены, на которые имеются ссылки в вашем исходном коде. Метаданные служат многим целям: 
o	устраняют необходимость в заголовочных и библиотечных файлах при компиляции, так как все сведения о типах и членах, на которые есть ссылки, содержатся в файле с IL-кодом, в котором они реализованы. Компиляторы могут читать метаданные прямо из управляемых модулей. 
o	при компиляции IL-кода в машинный код CLR выполняет верификацию (проверку "безопасности" выполнения кода) используя метаданные, например, нужное ли число параметров передается методу, корректны ли их типы, правильно ли используется возвращаемое значение и т.д. 
o	позволяют сборщику мусора отслеживать жизненный цикл объектов и т.д. 
4.	IL-код: управляемый код, создаваемый компилятором при компиляции исходного кода. Во время исполнения CLR компилирует IL-код в команды процессора. 
По умолчанию CLR-совместимые компиляторы генерируют управляемый код, безопасность выполнения которого поддается проверке средой CLR. Вместе с тем возможно разрабатывать неуправляемый или "небезопасный" код, которому разрешается работать непосредственно с адресами памяти и управлять байтами в этих адресах. Эта возможность, обычно полезна при взаимодействии с неуправляемым кодом или при необходимости добиться максимальной производительности при выполнении критически важных алгоритмов. Однако использовать неуправляемый код довольно рискованно, т.к. он способен разрушить существующие структуры данных. 
Чтобы понять принцип выполнения программы в среде CLR рассмотрим небольшой пример:
 

Непосредственно перед исполнением функции Main CLR находит все типы, на которые ссылается ее код. В нашем случае метод Main ссылается на единственный тип — Console, и CLR выделяет единственную внутреннюю структуру WriteLine. 
Когда Main первый раз обращается к WriteLine, вызывается функция JITCompiler (условное название), которая отвечает за компиляцию IL-кода вызываемого метода в собственные команды процессора. Функции JITCompiler известен вызываемый метод и тип, в котором он определен. JITCompiler ищет в метаданных соответствующей сборки IL-код вызываемого метода, затем проверяет и компилирует IL-код в собственные команды процессора, которые сохраняются в динамически выделенном блоке памяти. После этого JITCompiler возвращается к внутренней структуре данных типа и заменяет адрес вызываемого метода адресом блока памяти, содержащего собственные команды процессора. В завершение JITCompiler передает управление коду в этом блоке памяти. Далее управление возвращается в Main, который продолжает работу в обычном порядке.
Затем Main обращается к WriteLine вторично. К этому моменту код WriteLine уже проверен и скомпилирован, так что производится обращение к блоку памяти, минуя вызов JITCompiler. Отработав, метод WriteLine возвращает управление Main. 
Таким образом, за счет такой компиляции производительность теряется только при первом вызове метода. Все последующие обращения к одной и той же структуре выполняются "на полной скорости", без повторной верификация и компиляция.
 
Лекция 2. Состав языка С#
2.1 Основы технологии ООП
В основе языка С# лежит технология объектно-ориентированного программирования (ООП). Все программы на языке С# в большей или меньшей степени являются объектно-ориентированными, поэтому, приступая к написанию даже самой простой программы, нужно познакомиться с основными понятиями в рамках ООП. 
ООП основано на таких понятиях как "класс", "объект", "интерфейс", "инкапсуляция", "наследование", "полиморфизм", "событие".
Объект в программе — это абстракция реального объекта. Объект обладает атрибутами, поведением и индивидуальностью. Атрибуты определяют основные черты объекта, поведение — действия над объектом, индивидуальность — отличие одного объекта от другого с такими же атрибутами по их конкретным значениям. Например: два кота, у обоих есть шерсть, но у одного шерсть черного цвета, у другого — рыжая.
Класс – это множество объектов с одинаковыми атрибутами и поведением, представляемое в языке программирования в виде абстрактного типа данных, который включает в себя члены класса. Рассмотрим некоторые из них:
•	поля – непосредственно данные определенного типа для описания атрибутов; 
•	методы - функции, предназначенные для обработки внутренних данных объекта данного класса; 
•	свойства – это специальные поля данных, с помощью которых, можно управлять поведением объектов данного класса. 
Класс служит образцом для создания объектов или, другими словами, объект является экземпляром класса. 
Важным свойством объекта является его обособленность. Детали реализации объекта, то есть внутренние структуры данных и алгоритмы их обработки, скрыты от пользователя и недоступны для непреднамеренного изменения. Объект используется через его интерфейс - совокупность правил доступа. Скрытие деталей реализации называется инкапсуляцией. 
В ООП данные и методы одного класса могут передаваться другим классам с помощью механизма наследования. Порожденный класс (потомок), наследующий характеристики другого класса, обладает теми же возможностями, что и класс (предок), от которого он порожден. При этом класс-предок остается без изменения, а классу-потомку можно добавлять новые элементы (поля, методы, свойства) или изменять унаследованные методы. Благодаря этому класс-потомок обладает большими возможностями, чем предок. Так, например, все классы (а их очень много и с некоторыми из них мы познакомимся чуть позже) порождены от корневого класса System.Object. 
Классы-потомки некоторого класса являются разновидностями этого класса-предка. (Другими словами, класс-предок является обобщением своих потомков). Это означает, что к объектам классов-потомков можно обращаться с помощью одного и того же имени (но при этом могут выполняться различные действия) — что составляет суть полиморфизма. Чаще всего понятие полиморфизма связывают с механизмом виртуальных методов, который мы рассмотрим позднее.
Программу, построенную на принципах ООП, можно представить как совокупность взаимодействующих объектов. Объект А воздействует на объект Б, и для Б возникает событие, на которое Б отреагирует либо ответным воздействием на А, либо воздействием на объект В. Если А — внешний для системы объект, то Б — интерфейсный объект (отвечающий за взаимодействие системы с внешним миром).
Операционная система Windows — объектно-ориентированная система, в которой определены классы для производства объектов, обеспечивающих, в частности, интерфейс с пользователем. Программа, написанная под Windows, обращается к ней, командуя какой интерфейсный объект на каком именно месте создать — так строится внешний вид (интерфейс) программы. Эти интерфейсные объекты кажутся принадлежащими программе, но на самом деле они — часть Windows: именно она отвечает за их базовый внешний вид и поведение. Поэтому, когда пользователь воздействует на интерфейсный объект программы (нажимает кнопку, выбирает пункт меню и т.п.), для этого объекта происходит событие и Windows переводит это событие в сообщение для программы. При написании программы предусматривается однозначная реакция на это сообщение в виде метода, а в методе вызываются методы других объектов. Т.е. воздействие на интерфейсный объект приводит к появлению в недрах Windows сообщения, которое, приходя в программу, запускает цепочку взаимодействий внутренних для нее объектов. Таким образом, ООП программа фактически встраивается в ОС Windows.
Вспомним нашу первую программу:
class Program	//класс
{ 
 static void Main () //метод класса
  { 
   Console.WriteLine(_Hello!!!_);
  }
}
Программа содержит класс Program с единственным статическим (static) методом Main, что позволяет обращаться к данному методу класса без создания его экземпляра. 
2.2 Состав языка
Алфавит – совокупность допустимых в языке символов. Алфавит языка С# включает:
1.	прописные и строчные латинские буквы и буквы национальных алфавитов (включая кириллицу); 
2.	арабские цифры от 0 до 9, шестнадцатеричные цифры от A до F; 
3.	специальные знаки: " { } , | ; [ ] ( ) + - / % * . \ ' : ? < = > ! & ~ ^ @ _ 
4.	пробельные символы: пробел, символ табуляции, символ перехода на новую строку. 
Из символов алфавита формируются лексемы языка: идентификаторы, ключевые (зарезервированные) слова, знаки операций, константы, разделители (скобки, точка, запятая, пробельные символы).
Границы лексем определяются другими лексемами, такими, как разделители или знаки операций. В свою очередь лексемы входят в состав выражений (выражение задает правило вычисления некоторого значения) и операторов (оператор задает законченное описание некоторого действия). 
Идентификатор – это имя программного элемента: константы, переменной, метки, типа, класса, объекта, метода и т.д. Идентификатор может включать латинские буквы и буквы национальных алфавитов, цифры и символ подчеркивания. Прописные и строчные буквы различаются, например, myname, myName и MyName — три различных имени. Первым символом идентификатора может быть буква или знак подчеркивания, но не цифра. 
Пробелы внутри имен не допускаются. Язык С# не налагает никаких ограничений на длину имен, однако для удобства чтения и записи кода не стоит делать их слишком длинными.
Для улучшения читабельности кода программным элементам следует давать осмысленные имена, составленные в соответствии с определенными правилами. Существует несколько видов нотаций – соглашений о правилах создания имен.
В нотации Pascal каждое слово, входящее в идентификатор, начинается с заглавной буквы. Например:Age, LastName, TimeOfDeath.
Венгерская нотация отличается от предыдущей наличием префикса, соответствующего типу величины. Например: fAge, sName, iTime.
В нотации Camel с заглавной буквы начинается каждое слово идентификатора, кроме первого. Например: age, lastName, timeOfDeath.
Наиболее часто используются нотации Pascal или Camel. Мы будем придерживаться нотации Pascal. Однако в простых программах будут использоваться однобуквенные переменные.
Ключевые слова – это зарезервированные идентификаторы, которые имеют специальное значение для компилятора, например, include, main, int и т.д. Ключевые слова можно использовать только по прямому назначению. С ключевыми словами и их назначением можно ознакомиться в справочной системе С#. 
Замечание. Другие лексемы (знаки операций и константы), а также правила формирования выражений и различные виды операторов будут рассмотрены чуть позже.
2.3 Типы данных
С# является языком со строгой типизацией. В нем необходимо объявлять тип всех создаваемых программных элементов (например, переменных, объектов, окон, кнопок и т. д.), что позволяет компилятору предотвращать возникновение ошибок, следя за тем, чтобы объектам присваивались значения только разрешенного типа. Тип программного элемента сообщает компилятору о его размере (например, тип int показывает, что объект занимает 4 байта) и возможностях (например, кнопка может быть нарисована, нажата и т. д.).
В С# типы делятся на две группы: базовые типы, предлагаемые языком, и типы, определяемые пользователем. Кроме того, типы С# разбиваются на две другие категории: размерные типы (типы по значению) и ссылочные типы. Почти все базовые типы являются размерными типами. Исключение составляют типы Object и String. Все пользовательские типы, кроме структур, являются ссылочными. Дополнительно к упомянутым типам, язык С# поддерживает типы указателей, однако они используются только с неуправляемым кодом. 
Принципиальное различие между размерными и ссылочными типами состоит в способе хранения их значений в памяти. В первом случае фактическое значение хранится в стеке (или как часть большого объекта ссылочного типа). Адрес переменной ссылочного типа тоже хранится в стеке, но сам объект хранится в куче.
Замечание. Стек- это структура, используемая для хранения элементов по принципу первым пришел - последним ушел. В данном случае под стеком понимается область памяти, обслуживаемая процессором, в которой хранятся значения локальных переменных. Куча – область памяти, которая используется для хранения данных, работа с которыми реализуется через указатели и ссылки. Память для размещения таких данных динамически выделяется или освобождается в куче неявно (средствами CLR) или явно (программистом). 
Сборщик мусора уничтожает программные элементы в стеке через некоторое время после того, как закончит существование раздел стека, в котором они объявлены. В типичном случае раздел стека определяется методом. То есть, если в пределах метода объявлена локальная переменная, соответствующий программный элемент будет помечен для сборки мусора по окончании метода. Объект в куче подвергается сборке мусора через некоторое время после того, как уничтожена последняя ссылка на него.
Язык С# предлагает обычный набор базовых типов, каждому из них соответствует тип, поддерживаемый общеязыковой спецификацией .NET (CLS). Соответствие базовых типов языка С# и типов платформы .NET гарантирует, что объекты, созданные в С#, могут быть использованы на равных основаниях с объектами, созданными в любом другом языке, удовлетворяющем требованиям .NET CLS (например, в языке VB.NET).
Тип	Размер в байтах	Тип .NET	Описание 
Базовый тип
object		Object	Может хранить все что угодно, т.к. является всеобщим предком
Логический тип
bool	1	Bolean	true или false
Целые типы
sbyte	1	SByte	Целое со знаком (от -128 до 127)
byte	1	Byte	Целое без знака (от 0 до 255)
short	2	Int16	Целое со знака (от -32768 до 32767)
ushort	2	UInt16	Целое без знака (от 0 до 65535)
int	4	Int32	Целое со знаком (от -2147483648 до 2147483647)
uint	4	UInt	Целое число без знака ( от 0 до 4 294 967 295)
long	8	Int64	Целое со знаком (от -9223372036854775808 до 9223372036854775807) 
ulong	8	UInt64	Целое без знака (от 0 до 0fffffffffffffff)
Вещественные типы
float	4	Single	Число с плавающей точкой двойной точности. Содержит значения приблизительно от -1.5*10-45 до +3.4*1038 c 7 значащими цифрами
double	8	Double	Число с плавающей точкой двойной точности. Содержит значения приблизительно от -5. 0*10-324 до -1.7*10308 c 15-16 значащими цифрами 
Символьный тип
char	2	Сhar	Символы Unicode
Строковый тип
string		String	Строка из Unicode-символов
Финансовый тип
decimal 	12	Decimal 	Число до 28 знаков с фиксированным положением десятичной точки. Обычно используется в финансовых расчетах. Требует суффикса <<m>> или <<М>>
2.4 Переменные и константы
Переменная представляет собой типизированную область памяти. Программист создает переменную, объявляя ее тип и указывая имя. При объявлении переменной ее можно инициализировать (присвоить ей начальное значение), а затем в любой момент ей можно присвоить новое значение, которое заменит собой предыдущее. 
static void Main()
 {
   int i=10;	//объявление и инициализация целочисленной переменной i
   Console.WriteLine(i);		//просмотр значения переменной
   i=100;		//изменение значение переменной
   Console.WriteLine(i);
 }
В языке С# требуется, чтобы переменные были явно проинициализированы до их использования. Проверим этот факт на примере.
static void Main()
 {
   int i;
   Console.WriteLine(i);
 }
При попытке скомпилировать этот пример в списке ошибок будет выведено следующее сообщение: Use of unassigned local variable 'i' (используется неинициализированная локальная переменная i). 
Однако инициализировать каждую переменную необязательно, но необходимо присвоить ей значение до того, как она будет использована.
Константа - это переменная, значение которой нельзя изменить. Константы бывают трех видов: литералы, символические константы и перечисления. 
В операторе присваивания: x=32;
число 32 является литеральной константой. Его значение всегда равно 32 и его нельзя изменить. 
Символические константы именуют постоянные значения. Определение символической константы происходит следующим образом: 
const <тип>  <идентификатор> = <значение>;
Рассмотрим пример:
static void Main()
 {
   const int i=10;	//объявление целочисленной константы i
   Console.WriteLine(i);		//просмотр значения константы
   i=100;		//ошибка
   Console.WriteLine(i);
 }

Задание. Измените программу так, чтобы при объявлении константы не происходила инициализация. Как на это отреагирует компилятор и почему? 
Перечисления (enumerations) являются альтернативой константам. Перечисление - это особый размерный тип, состоящий из набора именованных констант (называемых списком перечисления).
Синтаксис определения перечисления следующий:
[атрибуты] [модификаторы] enum <имя> [ : базовый тип]
{список-перечисления констант(через запятую)};
Замечание. Атрибуты и модификаторы, являются необязательными элементами этой конструкции. Более подробно мы рассмотрим их позже. 
Базовый тип - это тип самого перечисления. Если не указать базовый тип, то по умолчанию будет использован тип int. В качестве базового типа можно выбрать любой целый тип, кроме char. Пример использования перечисления:
class Program
 {
   enum gradus:int
   {
    min=0,
    krit=72,
    max=100,
   }

   static void Main()
   {
    Console.WriteLine("минимальная температура=" + (int) gradus.min);
    Console.WriteLine("критическая температура=" + (int)gradus.krit);
    Console.WriteLine("максимальная температура=" + (int)gradus.max);
   }
}
Замечания 
1.	Запись (int) gradus.min используется для явного преобразования перечисления к целому типу. Если убрать (int), то на экран будет выводиться название констант. 
2.	Символ + в записи "минимальная температура=" + (int) gradus.min при обращении к методу WriteLine означает, что строка "минимальная температура=" будет "склеена" со строковым предствлением значения (int) gradus.min. В результате получится новая строка, которая и будет выведена на экран. 
2.5 Организация ввода-вывода данных. Форматирование
Программа при вводе данных и выводе результатов взаимодействует с внешними устройствами. Совокупность стандартных устройств ввода (клавиатура) и вывода (экран) называется консолью. В языке С# нет операторов ввода и вывода. Вместо них для обмена данными с внешними устройствами используются специальные объекты. В частности, для работы с консолью используется стандартный класс Console, определенный в пространстве имен System.
Вывод данных
В приведенных выше примерах мы уже рассматривали метод WriteLine, реализованный в классе Console, который позволяет организовывать вывод данных на экран. Однако существует несколько способов применения данного метода:
1.	Console.WriteLine(x); //на экран выводится значение идентификатора х 
2.	Console.WriteLine("x=" + x +"y=" + y); /* на экран выводится строка, образованная последовательным слиянием строки "x=", значения x, строки "у=" и значения у */ 
3.	Console.WriteLine("x={0} y={1}", x, y); /* на экран выводится строка, формат которой задан первым аргументом метода, при этом вместо параметра {0} выводится значение x, а вместо {1} – значение y*/ 
Замечание. 
Рассмотрим следующий фрагмент программы:
int i=3, j=4; Console.WriteLine("{0} {1}", i, j); 
При обращении к методу WriteLine через запятую перечисляются три аргумента: "{0} {1}", i, j. Первый аргумент определяет формат выходной строки. Следующие аргументы нумеруются с нуля, так переменная i имеет номер 0, j – номер 1. Значение переменной i будет помещено в выходную строку на место {0}, а значение переменной j –на место {1}. В результате на экран будет выведена строка: 3 4. Если мы обратимся к методу WriteLine следующим образом Console.WriteLine("{0} {1} {2)", j, i, j), то на экран будет выведена строка: 4 3 4. 
Последний вариант использования метода WriteLine является наиболее универсальным, потому что он позволяет не только выводить данные на экран, но и управлять форматом их вывода. Рассмотрим несколько примеров:
1.	Использование управляющих последовательностей: 
Управляющей последовательностью называют определенный символ, предваряемый обратной косой чертой. Данная совокупность символов интерпретируется как одиночный символ и используется для представления кодов символов, не имеющих графического обозначения (например, символа перевода курсора на новую строку) или символов, имеющих специальное обозначение в символьных и строковых константах (например, апостроф). Рассмотрим управляющие символы:
Вид	Наименование
\a	Звуковой сигнал
\b	Возврат на шаг назад
\f	Перевод страницы
\n	Перевод строки
\r	Возврат каретки
\t	Горизонтальная табуляция
\v	Вертикальная табуляция
\\	Обратная косая черта
\'	Апостроф
\"	Кавычки
Пример:
static void Main()
{
Console.WriteLine("Ура!\nСегодня \"Информатика\"!!!");    
}
 
2.	Управление размером поля вывода: 
Первым аргументом WriteLine указывается строка вида {n, m} – где n определяет номер идентификатора из списка аргументов метода WriteLine, а m – количество позиций (размер поля вывода), отводимых под значение данного идентификатора. При этом значение идентификатора выравнивается по правому краю. Если выделенных позиций для размещения значения идентификатора окажется недостаточно, то автоматически добавиться необходимое количество позиций. Пример:
static void Main()
   {
    double x= Math.E;
    Console.WriteLine("E={0,20}", x);
    Console.WriteLine("E={0,10}", x);
    }	 3.	Управление размещением вещественных данных: 
Первым аргументом WriteLine указывается строка вида {n: ##.###} – где n определяет номер идентификатора из списка аргументов метода WriteLine, а ##.### определяет формат вывода вещественного числа. В данном случае под целую часть числа отводится две позиции, под дробную – три. Если выделенных позиций для размещения целой части значения идентификатора окажется недостаточно, то автоматически добавиться необходимое количество позиций. Пример:
static void Main()
   {
    double x= Math.E;
    Console.WriteLine("E={0:##.###}", x);
    Console.WriteLine("E={0:.####}", x);
    }	 Задание. Измените программу так, чтобы число e выводилось на экран с точностью до 6 знаков после запятой.
4.	Управление форматом числовых данных: 
Первым аргументом WriteLine указывается строка вида {n: <спецификатор>m} – где n определяет номер идентификатора из списка аргументов метода WriteLine, <спецификатор> - определяет формат данных, а m – количество позиций для дробной части значения идентификатора. В качестве спецификаторов могут использоваться следующие значения:
Параметр	Формат	Значение
C или c	Денежный. По умолчанию ставит знак р. Изменить его можно с помощь объекта NumberFormatInfo	Задается количество десятичных разрядов. 
D или d	Целочисленный (используется только с целыми числами)	Задается минимальное количество цифр. При необходимости результат дополняется начальными нулями
E или e	Экспоненциальное представление чисел	Задается количество символов после запятой. По умолчанию используется 6
F или f	Представление чисел с фиксированной точкой	Задается количество символов после запятой
G или g	Общий формат (или экспоненциальный, или с фиксированной точкой)	Задается количество символов после запятой. По умолчанию выводится целая часть
N или n	Стандартное форматирование с использованием запятых и пробелов в качестве разделителей между разрядами	Задается количество символов после запятой. По умолчанию – 2, если число целое, то ставятся нули
X или x	Шестнадцатеричный формат	
P или p	Процентный	
Пример:
static void Main()
 {
   Console.WriteLine("C Format:{0,14:C} \t{0:C2}", 12345.678);
   Console.WriteLine("D Format:{0,14:D} \t{0:D6}", 123);
   Console.WriteLine("E Format:{0,14:E} \t{0:E8}", 12345.6789);
   Console.WriteLine("G Format:{0,14:G} \t{0:G10}", 12345.6789);
   Console.WriteLine("N Format:{0,14:N} \t{0:N4}", 12345.6789);
   Console.WriteLine("X Format:{0,14:X} ", 1234);
   Console.WriteLine("P Format:{0,14:P} ", 0.9);    
 }
 
Ввод данных
Для ввода данных обычно используется метод ReadLine, реализованный в классе Console. Особенностью данного метода является то, что в качестве результата он возвращает строку (string). Пример:
static void Main()
 {
   string s = Console.ReadLine();
   Console.WriteLine(s);
 }
Для того чтобы получить числовое значение необходимо воспользоваться преобразованием данных. Пример:
static void Main()
 {
   string s = Console.ReadLine();
   int x = int.Parse(s); //преобразование строки в число
   Console.WriteLine(x);
 }
Или сокращенный вариант:
static void Main()
 {
   //преобразование введенной строки в число
   int x = int.Parse(Console.ReadLine()); 
   Console.WriteLine(x);
 }
Для преобразования строкового представления целого числа в тип int мы используем метод int.Parse(), который реализован для всех числовых типов данных. Таким образом, если нам потребуется преобразовать строковое представление в вещественное, мы можем воспользоваться методом float.Parse() или double.Parse(). В случае, если соответствующее преобразование выполнить невозможно, то выполнение программы прерывается и генерируется исключение System.FormatExeption (входная строка имела неверный формат).
Задание. Измените предыдущий фрагмент программы так, чтобы с клавиатуры вводилось вещественное число, а на экран это число выводилось с точностью до 3 знаков после запятой.
 
Лекция 3. Операции языка С#
В данном разделе мы подробно рассмотрим только часть операций, остальные операции будут вводиться по мере необходимости. 
Замечание. Операции можно классифицировать по количеству операндов на: унарные - воздействуют на один операнд, бинарные - воздействуют на два операнда, тернарные - воздействует на три операнда. Некоторые символы используются для обозначения как унарных, так и бинарных операций. Например, символ "минус" используется как для обозначения унарной операции - арифметического отрицания, так и для обозначения бинарной операции вычитание. Будет ли данный символ обозначать унарную или бинарную операцию, определяется контекстом, в котором он используется.
3.1 Некоторые операции С#
1.	Инкремент (++) и декримент(--). 
Эти операции имеют две формы записи - префиксную, когда операция записывается перед операндом, и постфиксную - операция записывается после операнда. Префиксная операция инкремента (декремента) увеличивает (уменьшает) свой операнд и возвращает измененное значение как результат. Постфиксные версии инкремента и декремента возвращают первоначальное значение операнда, а затем изменяют его.
Рассмотрим эти операции на примере.
static void Main()
{
 int i = 3, j = 4;
 Console.WriteLine("{0} {1}", i, j);
 Console.WriteLine("{0} {1}", ++i, --j);
 Console.WriteLine("{0} {1}", i++, j--);
 Console.WriteLine("{0} {1}", i, j);
}	Результат работы программы: 
3 4
4 3
4 3
5 2
Задание. Выясните, допустимы ли следующие способы записи ++(++i), (i--)--, ++(i--) и т.д. И почему. 
Замечание. Префиксная версия требует существенно меньше действий: она изменяет значение переменной и запоминает результат в ту же переменную. Постфиксная операция должна отдельно сохранить исходное значение, чтобы затем вернуть его как результат. Для сложных типов подобные дополнительные действия могут оказаться трудоемки. Поэтому постфиксную форму имеет смысл использовать только при необходимости.
2.	Операция new. Используется для создания нового объекта. С помощью ее можно создавать как объекты ссылочного типа, так и размерные, например: 
3.	object z=new object();
4.	int i=new int(); // то же самое, что и int i =0;
5.	Отрицание: 
o	Арифметическое отрицание (-) - меняет знак операнда на противоположный. 
o	Логическое отрицание (!) - определяет операцию инверсия для логического типа. 
Рассмотрим эти операции на примере. 
static void Main()
{
 int i = 3, j=-4;
 bool a = true, b=false;
 Console.WriteLine("{0} {1}", -i, -j);
 Console.WriteLine("{0} {1}", !a, !b);
}	Результат работы программы: 
-3   4
False True
Задание. Выясните, допустимы ли следующие способы записи !(-i), -(!a). И почему. 
6.	Явное преобразование типа. Используется для явного преобразования из одного типа в другой. Формат операции: 
7.	(тип) выражение;
Рассмотрим эту операцию на примере.
Static void Main()
{
 int i = -4;
 byte j = 4;
 int a = (int)j;  //преобразование без потери точности
 byte b = (byte)i; //преобразование с потерей точности
 Console.WriteLine("{0} {1}", a, b);
}	Результат работы программы: 
4   252
Задание. Объясните, почему операция (byte)i вместо ожидаемого значения -4 дала нам в качестве результата значение 252.
8.	Умножение (*), деление (/) и деление с остатком (%). Операции умножения и деления применимы для целочисленных и вещественных типов данных. Для других типов эти операции применимы, если для них возможно неявное преобразование к целым или вещественным типам. При этом тип результата равен "наибольшему" из типов операндов, но не менее int. Если оба операнда при делении целочисленные, то и результат тоже целочисленный. 
Рассмотрим эти операции на примере.
static void Main()
{
  int i = 100, j = 15;
  double a = 14.2, b = 3.5;
  Console.WriteLine("{0} {1} {2}", i*j, i/j, i%j);
  Console.WriteLine("{0} {1} {2}", a * b, a / b, a % b);
}	
Результат работы программы:
1500    6    10
49.7     4.05714285714286     0.1999999999999999
Задание. Выясните, чему будет равен результат операции: 
o	1.0/0; 
o	1/0
И объясните, как получился данный результат.
9.	Сложение (+) и вычитание (-). Операции сложения и вычитания применимы для целочисленных и вещественных типов данных. Для других типов эти операции применимы, если для них возможно неявное преобразование к целым или вещественным типам. 
10.	Операции отношения ( <, <=, >, >=, ==, !=). Операции отношения сравнивают значения левого и правого операндов. Результат операции логического типа: true - если значения совпадают, false - в противном случае. Рассмотрим операции на примере: 
static void Main()
 {
  int i = 15, j = 15;
  Console.WriteLine(i<j); //меньше
  Console.WriteLine(i<=j);  //меньше или равно
  Console.WriteLine(i>j);  //больше
  Console.WriteLine(i>=j); //больше или равно
  Console.WriteLine(i==j);  //равно
  Console.WriteLine(i!=j);  //не равно
 }	Результат работы программы: 
False
True
False 
True
True
False
11.	Задание. Выясните, чему равен результат данного выражения: 
o	i<j<k 
o	true<false 
И объясните, как получился данный результат.
12.	Логические операции: И (&&), ИЛИ (||). 
Логические операции применяются к операндам логического типа. 
Результат логической операции И имеет значение истина тогда и только тогда, когда оба операнда принимают значение истина.
Результат логической операции ИЛИ имеет значение истина тогда и только тогда, когда хотя бы один из операндов принимает значение истина.
Рассмотрим операции на примере:
static void Main()
{
  Console.WriteLine("x     y     x и y    x или y");
  Console.WriteLine("{0} {1} {2} {3}", false, false, false&&false, false||false);
  Console.WriteLine("{0} {1} {2} {3}", false, true, false&&true, false||true);
  Console.WriteLine("{0} {1} {2} {3}", true, false, true&&false, true||false);
  Console.WriteLine("{0} {1} {2} {3}", true, true, true&&true, true||true);
}
Результат работы программы:
x	y	x и y	x или y
False	False	False	False
False	True	False	True
True	False	False	True
True	True	True	True
Замечание. Фактически была построена таблица истинности для логических операций И и ИЛИ.
Задание. Объясните, какое значение примет переменная t в данном фрагменте программы: int a=10, b=3; bool t=(a>=b && a!=2*b || a<0); 
13.	Условная операция. 
Формат: (<операнд1>)? <операнд2> : <операнд3>;
Операнд1 - это логическое выражение, которое оценивается с точки зрения его эквивалентности константам true и false. Если результат вычисления операнда1 равен true, то результатом условной операции будет значение операнда2, иначе - операнда3. Фактически условная операция является сокращенной формой условного оператора if, который будет рассмотрен позже.
Пример использования условной операции: 
static void Main()
{
  int x=5; int y=10;
  int max = (x > y) ? x : y;
  Console.WriteLine(max);
}
Задание. Измените программу так, чтобы: 
o	вычислялось наименьшее значение из двух вещественных чисел x и y; 
o	если число двузначное, то на экран выводилось "Да", и "Нет" в противном случае. 
14.	Операции присваивания: =, +=, -= и т.д. 
Формат операции простого присваивания (=):
операнд_2 = операнд_1;
В результате выполнения этой операции вычисляется значение операнда_1, и результат записывается в операнд_2. Возможно связать воедино сразу несколько операторов присваивания, записывая такие цепочки: a=b=c=100. Выражение такого вида выполняется справа налево: результатом выполнения c=100 является число 100, которое затем присваивается переменной b, результатом чего опять является 100, которое присваивается переменной a.
Кроме простой операции присваивания существуют сложные операции присваивания, например, умножение с присваиванием (*=), деление с присваиванием (/=), остаток от деления с присваиванием (%=), сложение с присваиванием (+=), вычитание с присваиванием (-=) и т.д.
В сложных операциях присваивания, например, при сложении с присваиванием, к операнду_2 прибавляется операнд_1, и результат записывается в операнд_2. То есть, выражение с += а является более компактной записью выражения с = с + а . Кроме того, сложные операции присваивания позволяют сгенерировать более эффективный код, за счет того, что в простой операции присваивания для хранения значения правого операнда создается временная переменная, а в сложных операциях присваивания значение правого операнда сразу записывается в левый операнд. 
Задание. Объясните, какие значения примут переменные t и b после выполнения данного фрагмента программы: int a=10, b=3; int t=(a++)-b; int b+=t*a; 
Рассмотренные операции приведены с учетом убывания приоритета. Если в одном выражении соседствуют операции одного приоритета, то операции присваивания и условная операции выполняются справа налево, а остальные наоборот. Если необходимо изменить порядок выполнения операций, то в выражении необходимо поставить круглые скобки.
3.2 Выражения и преобразование типов
Выражение - это синтаксическая единица языка, определяющая способ вычисления некоторого значения. Выражения состоят из операндов, операций и скобок. Каждый операнд является в свою очередь выражением или одним из его частных случаев - константой, переменной или функций. 
Замечание. Список математических функции, реализованных в С# приведен в приложении 2. 
Примеры выражений:
(а + 0.12)/6			
х && у || !z			
(t * Math.Sin(x)-l.05e4)/((2 * k + 2) * (2 * k + 3))
Операции выполняются в соответствии с приоритетами (см. приложение 1). Для изменения порядка выполнения операций используются круглые скобки. Если в одном выражении записано несколько операций одинакового приоритета, то унарные операции, условная операция и операции присваивания выполняются справа налево, остальные - слева направо. Например,
а = b = с означает a=(b=c),
a+b+c означает (а + b) + с.
Задания 
1.	Укажите последовательность выполнения операций в данном выражении: 
(x*x+Math.Sin(x+1))/x-2.
2.	Запишите заданное математическое выражение по правилам языка С#: 
o	 
o	 
o	 
Результат вычисления выражения характеризуется значением и типом. Например, если а и b - переменные целого типа и описаны так:
int а = 2, b = 5;
то выражение а + b имеет значение 7 и тип int.
В выражение могут входить операнды различных типов. Если операнды имеют одинаковый тип, то результат операции будет иметь тот же тип. Если операнды разного типа, то перед вычислениями выполняются преобразования более коротких типов в более длинные для сохранения значимости и точности. Иерархия типов данных приведена в следующей схеме: 
 

Преобразование типов в выражениях происходит неявно (без участия программистов) следующим образом: Если одни из операндов имеет тип, изображенный на более низком уровне, чем другой, то он приводится к типу второго операнда при наличии пути между ними. Если пути нет, то возникает ошибка компиляции (чтобы ее избежать, необходимо воспользоваться операцией явного преобразования). Если путей преобразования несколько, то выбирается наиболее короткий, не содержащий пунктирных линий.
3.3 Перечень операций 
Операции языка С# приведены в порядке убывания приоритетов. Операции с разными приоритетами разделены чертой.
Операция	Описание 
.	Доступ к элементу
x()	Вызов метода или делегата
x[]	Доступ к элементу
x++	Постфиксный инкремент
x--	Постфиксный декремент
new	Выделение памяти
typeof	Получение типа
checked	Проверяемый код
unchecked	Непроверяемый код
+	Унарный плюс
-	Арифметическое отрицание
!	Логическое отрицание
~	Поразрядное отрицание
++x	Префиксный инкремент
--x	Префиксный декремент
(тип) x	Преобразование типа
*	Умножение
/	Деление
%	Остаток от деления
<<	Сдвиг влево
>>	Сдвиг вправо
<	Меньше
>	Больше
<=	Меньше или равно
>=	Больше или равно
is	Проверка принадлежности типу
as	Приведение типа
==	Равно
!=	Не равно
&	Поразрядное И
^	Поразрядное исключающее ИЛИ
|	Поразрядное ИЛИ
&&	Логическое И
||	Логическое ИЛИ
? :	Условная операция
=	Простое присваивание
*=	Умножение с присваиванием
/=	Деление с присваиванием
%=	Остаток от деления с присваиванием
+=	Сложение с присваиванием
-=	Вычитание с присваиванием
<<=	Сдвиг влево с присваиванием
>>=	Сдвиг вправо с присваиванием 
&=	Поразрядное И с присваиванием
^=	Поразрядное исключающее ИЛИ с присваиванием
|=	Поразрядное ИЛИ с присваиванием



3.4 Математические функции языка С#
С# содержит большое количество встроенных математических функций, которые реализованы в классе Math пространства имен System. 
Рассмотрим краткое описание некоторых математических функций, подробнее с ними можно познакомиться в справочной систем VS или технической документации. Особое внимание следует обратить на типы операндов и результатов, т.к. каждая функция может имееть несколько перегруженных версий.
Замечание. Использование нескольких функций с одним и тем же именем, но с различными типами параметров, называется перегрузкой функции. Например, функция Math.Abs(), вычисляющая модуль числа, имеет 7 перегруженных версий: double Math.Abs (double x), float Math.Abs (float x), int Math.Abs(int x), и т.д.
№	Название	Описание
1.	Math.Abs(<выражение>)	Модуль
2.	Math.Ceiling(<выражение>)	Округление для большего целого
3.	Math.Cos(<выражение>)	Косинус
4.	Math.Е	Число е
5.	Math.Exp(<выражение>)	Экспонента
6.	Math.Floor(<выражение>)	Округление до меньшего целого
7.	Math.Log(<выражение>)	Натуральный логарифм
8.	Math.Log10(<выражение>)	Десятичный логарифм
9.	Math.Max(<выражение1>, <выражение2>)	Максимум из двух значений
10.	Math.Min(<выражение1>, <выражение2>)	Минимум из двух значений
11.	Math.PI	Число  12.	Math.Pow(<выражение1>, <выражение2>)	Возведение в степень
13.	Math.Round(<выражение>)	Простое округление
14.	Math.Sign(<выражение>)	Знак числа
15.	Math.Sin(<выражение>)	Синус
16.	Math.Sqrt(<выражение>)	Квадратный корень
17.	Math.Тan(<выражение>)	Тангенс


 
Лекция 4. Операторы языка C#
Программа на языке С# состоит из последовательности операторов, каждый из которых определяет законченное описание некоторого действия и заканчивается точкой с запятой. Все операторы можно разделить на 4 группы: операторы следования, операторы ветвления, операторы цикла и операторы передачи управления.
4.1 Операторы следования
Операторы следования выполняются компилятором в естественном порядке: начиная с первого до последнего. К операторам следования относятся: выражение и составной оператор. 
Любое выражение, завершающееся точкой с запятой, рассматривается как оператор, выполнение которого заключается в вычислении значения выражения или выполнении законченного действия, например, вызова метода. Например:
++i;			//оператор инкремента
x+=y;			//оператор сложение с присваиванием
Console.WriteLine(x); 	//вызов метода
x=Math.Pow(a,b)+a*b;	//вычисление сложного выражения

Частным случаем оператора выражения является пустой оператор ; Он используется тогда, когда по синтаксису оператор требуется, а по смыслу - нет. В этом случае лишний символ ; является пустым оператором и вполне допустим, хотя и не всегда безопасен. Например, случайный символ ; после условия оператора while или if может совершенно поменять работу этого оператора.
Составной оператор или блок представляет собой последовательность операторов, заключенных в фигурные скобки {}. Блок обладает собственной областью видимости: объявленные внутри блока имена доступны только внутри данного блока или блоков, вложенных в него. Составные операторы применяются в случае, когда правила языка предусматривают наличие только одного оператора, а логика программы требует нескольких операторов. Например, тело цикла while должно состоять только из одного оператора. Если заключить несколько операторов в фигурные скобки, то получится блок, который будет рассматриваться компилятором как единый оператор. 
4.2 Операторы ветвления
Операторы ветвления позволяют изменить порядок выполнения операторов в программе. К операторам ветвления относятся условный оператор if и оператор выбора switch.
Условный оператор if
Условный оператор if используется для разветвления процесса обработки данных на два направления. Он может иметь одну из форм: сокращенную или полную. 
Форма сокращенного оператора if: 
if (B)  S;
где В - логическое или арифметическое выражение, истинность которого проверяется; S - оператор: простой или составной.
При выполнении сокращенной формы оператора if сначала вычисляется выражение B, затем проводится анализ его результата: если B истинно, то выполняется оператор S; если B ложно, то оператор S пропускается. Таким образом, с помощью сокращенной формы оператора if можно либо выполнить оператор S, либо пропустить его. 
Форма полного оператора if:
if (B) S1; else S2;
где B - логическое или арифметическое выражение, истинность которого проверяется; S1, S2- оператор: простой или составной.
При выполнении полной формы оператора if сначала вычисляется выражение B, затем анализируется его результат: если B истинно, то выполняется оператор S1, а оператор S2 пропускается; если B ложно, то выполняется оператор S2, а S1 - пропускается. Таким образом, с помощью полной формы оператора if можно выбрать одно из двух альтернативных действий процесса обработки данных.
Рассмотрим несколько примеров записи условного оператора if:
if (a > 0) x=y;		// Сокращенная форма c простым оператором 
if (++i) {x=y; y=2*z;}		// Сокращенная форма c составным оператором
if (a > 0 || b<0) x=y; else  x=z;	// Полная форма с простым оператором
if (i+j-1) { x= 0; y= 1;} else {x=1; y:=0;}	// Полная форма с составными операторами

Рассмотрим пример использования условного оператора.
static void Main()
{
  Console.Write("x= ");
  float x = float.Parse(Console.ReadLine());
  	Console.Write("y=");
  float y = float.Parse(Console.ReadLine());
  if (x < y ) Console.WriteLine("min= "+x);
  else Console.WriteLine("min= "+y);
}
Результат работы программы: 
x	y	min
0	0	0
1	-1	-1
-2	2	-2
Задание. Измените программу так, чтобы вычислялось наибольшее значение из х и у.
Операторы S1 и S2 могут также являться операторами if. Такие операторы называют вложенными. При этом ключевое слово else связывается с ближайшим предыдущим словом if, которое еще не связано ни с одним else. Рассмотрим пример программы, использующей вложенные условные операторы.
Пример: Дана мишень.  
Подсчитать количество очков после выстрела по данной мишени.
static void Main()
{
  int Ball=0;
   Console.Write("x= ");
  float x = float.Parse(Console.ReadLine());
  Console.Write("y= ");
  float y = float.Parse(Console.ReadLine());
  if (x * x + y * y <=1) Ball = 10;	//окружность с радиусом 1
  else  if (x * x + y * y <= 4) Ball = 5;	//окружность с радиусом 2
  Console.WriteLine("Ball= "+ Ball);
}
Результат работы программы: 
x	y	Ball
0	0	10
1	-1	5
-2	2	0
Задание. Измените программу так, чтобы подсчитывалось количество очков для мишени вида  
Оператор выбора switch
Оператор выбора switch предназначен для разветвления процесса вычислений по нескольким направлениям. Формат оператора:
switch ( <выражение> )
{ 
  case <константное_выражение_1>: 
   [<оператор 1>];  <оператор перехода>;
  case <константное_выражение_2>: 
   [<оператор 2>]; <оператор перехода>; 
  ...
  case <константное_выражение_n>: 
   [<оператор n>]; <оператор перехода>;
   [default: <оператор>; ] 
}
Замечание. Выражение, записанное в квадратных скобках, является необязательным элементом в операторе switch. Если оно отсутствует, то может отсутствовать и оператор перехода. 
Выражение, стоящее за ключевым словом switch, должно иметь арифметический, символьный, строковый тип или тип указатель. Все константные выражения должны иметь разные значения, но их тип должен совпадать с типом выражения, стоящим после switch или приводиться к нему. Ключевое слово case и расположенное после него константное выражение называют также меткой case.
Выполнение оператора начинается с вычисления выражения, расположенного за ключевым словом switch. Полученный результат сравнивается с меткой case. Если результат выражения соответствует метке case, то выполняется оператор, стоящий после этой метки, за которым обязательно должен следовать оператор перехода: break, goto и т.д. При использовании оператора break происходит выход из switch и управление передается оператору, следующему за switch. Если же используется оператор goto, то управление передается оператору, помеченному меткой, стоящей после goto. 
Пример. По заданному виду арифметической операции (сложение, вычитание, умножение и деление) и двум операндам, вывести на экран результат применения данной операции к операндам.
static void Main()
{
  Console.Write("OPER= ");
  char oper=char.Parse(Console.ReadLine());
  bool ok=true;
  Console.Write("A= ");
  int a=int.Parse(Console.ReadLine());
  Console.Write("B= ");            
  int b=int.Parse(Console.ReadLine());
  float res=0;
  switch (oper)
  {
    case '+': res = a + b; break;	//1
    case '-': res = a - b; break;
    case '*': res = a * b; break;
    case ':': if (b != 0)
    { 
      res = (float)a / b; break;
    }
    else goto default;
    default: ok = false; break;        
  }
  if (ok) Console.WriteLine("{0} {1} {2} = {3}", a, oper, b, res);
  else Console.WriteLine("error");
}
Результат выполнения программы: 
oper	x	y	rez
+	4	5	9
:	4	0	error
%	4	3	error
Задания. 
1.	Замените в строке 1 оператор break, на оператор goto case '-' и посмотрите, что произойдет, если в качестве операции ввести +. 
2.	В условном операторе if уберите ветку else и посмотрите, что произойдет. 
Если необходимо, чтобы для разных меток выполнялось одно и тоже действие, то метки перечисляются через двоеточие. Например:
switch (oper)
{
  case '+': res = a + b; break;	
  case '-': res = a - b; break;
  case '*': res = a * b; break;
  case '/': case ':': if (b != 0)  // перечисление меток
  {
    res = (float)a / b; break;
  }
  else goto default;
  default: ok = false; break;
}
4.3 Операторы цикла
Операторы цикла используются для организации многократно повторяющихся вычислений. К операторам цикла относятся: цикл с предусловием while, цикл с постусловием do while, цикл с параметром for и цикл перебора foreach.. 
Цикл с предусловием while
Оператор цикла while организует выполнение одного оператора (простого или составного) неизвестное заранее число раз. Формат цикла while: 
while (B) S;
где B - выражение, истинность которого проверяется (условие завершения цикла); S - тело цикла - оператор (простой или составной).
Перед каждым выполнением тела цикла анализируется значение выражения В: если оно истинно, то выполняется тело цикла, и управление передается на повторную проверку условия В; если значение В ложно - цикл завершается и управление передается на оператор, следующий за оператором S. 
Если результат выражения B окажется ложным при первой проверке, то тело цикла не выполнится ни разу. Отметим, что если условие B во время работы цикла не будет изменяться, то возможна ситуация зацикливания, то есть невозможность выхода из цикла. Поэтому внутри тела должны находиться операторы, приводящие к изменению значения выражения B так, чтобы цикл мог корректно завершиться.
В качестве иллюстрации выполнения цикла while рассмотрим программу вывода на экран целых чисел из интервала от 1 до n.
static void Main()
{
  Console.Write("N= ");
  int n=int.Parse(Console.ReadLine());
  int i = 1;
  while (i <= n)           //пока i меньше или равно n
  Console.Write(" "+ i++ ); //выводим i на экран, затем увеличиваем его на 1             
}
Результаты работы программы: 
n               ответ
10               1  2  3  4  5  6  7  8  9  10
Задание. Измените программу так, чтобы: 
1.	числа выводились в обратном порядке; 
2.	выводились только нечетные числа. 
Цикл с постусловием do while
Оператор цикла do while также организует выполнение одного оператора (простого или составного) неизвестное заранее число раз. Однако в отличие от цикла while условие завершения цикла проверяется после выполнения тела цикла. Формат цикла do while: 
do  S while (B);
где В - выражение, истинность которого проверяется (условие завершения цикла); S - тело цикла - оператор (простой или блок).
Сначала выполняется оператор S, а затем анализируется значение выражения В: если оно истинно, то управление передается оператору S, если ложно - цикл завершается, и управление передается на оператор, следующий за условием B. Так как условие В проверяется после выполнения тела цикла, то в любом случае тело цикла выполнится хотя бы один раз.
В операторе do while, так же как и в операторе while, возможна ситуация зацикливания в случае, если условие В всегда будет оставаться истинным. 
В качестве иллюстрации выполнения цикла do while рассмотрим программу вывода на экран целых чисел из интервала от 1 до n.
static void Main()
{
  Console.Write("N= ");
  int n=int.Parse(Console.ReadLine());
  int i = 1;
  do
    Console.Write(" " + i++); 
    //выводим i на экран, затем увеличиваем его на 1
  while (i <= n); //пока i меньше или равно n
}
Задание. Измените программу так, чтобы: 
1.	1. числа выводились в обратном порядке; 
2.	2. выводились только четные числа. 
Цикл с параметром for
Цикл с параметром имеет следующую структуру:
for ( <инициализация>; <выражение>; <модификация>) <оператор>;
Инициализация используется для объявления и/или присвоения начальных значений величинам, используемым в цикле в качестве параметров (счетчиков). В этой части можно записать несколько операторов, разделенных запятой. Областью действия переменных, объявленных в части инициализации цикла, является цикл и вложенные блоки. Инициализация выполняется один раз в начале исполнения цикла. 
Выражение определяет условие выполнения цикла: если его результат истинен, цикл выполняется. Истинность выражения проверяется перед каждым выполнением тела цикла, таким образом, цикл с параметром реализован как цикл с предусловием. В блоке выражение через запятую можно записать несколько логических выражений, тогда запятая равносильна операции логическое И (&&). 
Модификация выполняется после каждой итерации цикла и служит обычно для изменения параметров цикла. В части модификация можно записать несколько операторов через запятую. 
Оператор (простой или составной) представляет собой тело цикла. 
Любая из частей оператора for (инициализация, выражение, модификация, оператор) может отсутствовать, но точку с запятой, определяющую позицию пропускаемой части, надо оставить.
static void Main()
{
Console.Write("N= ");
int n=int.Parse(Console.ReadLine());
for (int i=1; i<=n;)     //блок модификации пустой     
Console.Write(" " + i++); 
}

Задание. Измените программу так, чтобы: 
1.	числа выводились в обратном порядке; 
2.	выводились квадраты чисел. 
Замечание. Цикл перебора foreach будет рассмотрен позже.

Вложенные циклы
Циклы могут быть простые или вложенные (кратные, циклы в цикле). Вложенными могут быть циклы любых типов: while, do while, for. Каждый внутренний цикл должен быть полностью вложен во все внешние циклы. "Пересечения" циклов не допускаются. 
Рассмотрим пример использования вложенных циклов, который позволит вывести на экран числа следующим образом: 
2	2	2	2	2
2	2	2	2	2
2	2	2	2	2
2	2	2	2	2
static void Main()
{
  for (int i = 1; i <= 4; ++i, Console.WriteLine())     //1
  for (int j=1; j<=5; ++j)
  Console.Write(" " + 2); 
}
Замечание. В строке 1 в блоке модификации содержится два оператора ++i и Console.WriteLine(). В данном случае после каждого увеличения параметра i на 1 курсор будет переводиться на новую строку. 
Задание. Измените программу так, чтобы таблица содержала n и m столбцов (значения n и m вводятся с клавиатуры). 
4.4 Операторы безусловного перехода
В С# есть несколько операторов, изменяющих естественный порядок выполнения команд: оператор безусловного перехода goto, оператор выхода break, оператор перехода к следующей итерации цикла continue, оператор возврата из метода return и оператор генерации исключения throw.
Оператор безусловного перехода goto
Оператор безусловного перехода goto имеет формат:
goto <метка>;
В теле той же функции должна присутствовать ровно одна конструкция вида:
<метка>: <оператор>;
Оператор goto передает управление на помеченный меткой оператор. Рассмотрим пример использования оператора goto:
static void Main()
{      
  float x;
  metka: Console.WriteLine("x="); //оператор, помеченный меткой 
  x = float.Parse(Console.ReadLine());
  if (x!=0) Console.WriteLine("y({0})={1}", x, 1 / x ); 
  else
  {
    Console.WriteLine("функция не определена");
    goto metka; // передача управление метке
  }	
}
Следует учитывать, что использование оператора goto затрудняет чтение больших по объему программ, поэтому использовать метки нужно только в крайних случаях, например, в операторе switch.
Оператор выхода break
Оператор break используется внутри операторов ветвления и цикла для обеспечения перехода в точку программы, находящуюся непосредственно за оператором, внутри которого находится break. 
Мы уже применяли оператор break для выхода из оператора switch, аналогичным образом он может применяться для выхода из других операторов.
Оператор перехода к следующей итерации цикла continue
Оператор перехода к следующей итерации цикла continue пропускает все операторы, оставшиеся до конца тела цикла, и передает управление на начало следующей итерации (повторение тела цикла). Рассмотрим оператор continue на примере.
static void Main()
{
  Console.WriteLine("n=");            
  int n = int.Parse(Console.ReadLine());
  for (int i = 1; i <= n; i++)
  {
    if (i % 2 == 0) continue;
    Console.Write(" " + i);
  }
}

Замечание. Операторы return и throw будут рассмотрены позже.
Практикум
1.	Дана точка на плоскости с координатами (х, у). Составить программу, которая выдает одно из сообщений "Да", "Нет", "На границе" в зависимости от того, лежит ли точка внутри заштрихованной области, вне заштрихованной области или на ее границе. 
Пример:
1.  
using System;
namespace Hello
{
  class Program
  {
     static void Main()
     {
     Console.Write("x=");            
     float x = float.Parse(Console.ReadLine());
     Console.Write("y=");
     float y = float.Parse(Console.ReadLine());
     if (x * x + y * y < 9 && y > 0)
       Console.WriteLine("внутри");
     else if (x * x + y * y > 9 || y < 0)
       Console.WriteLine("вне");
       else Console.WriteLine("на границе");
      }
  }
}
2. Дан порядковый номер дня недели, вывести на экран его название. 
Пример:
using System;
namespace Hello
{
  class Program
  {
    static void Main()
    {
      Console.Write("n=");            
      byte n = byte.Parse(Console.ReadLine());
      switch (n)
      {
        case 1: Console.WriteLine("понедельник"); break;
        case 2: Console.WriteLine("вторник"); break;
        case 3: Console.WriteLine("среда"); break;
        case 4: Console.WriteLine("четверг"); break;
        case 5: Console.WriteLine("пятница"); break;
        case 6: Console.WriteLine("суббота"); break;
        case 7: Console.WriteLine("воскресенье"); break;
        default: Console.WriteLine("ВЫ ОШИБЛИСЬ"); break;
      }
    }
  }
}
3. Вывести на экран, используя операторы цикла while, do while и for,целые числа 1, 3, 5, …, 21 в строчку через пробел: 
Пример:
using System;
namespace Hello
{
  class Program
  {
      
    static void Main()
    {
      Console.Write("n=");            
      byte n = byte.Parse(Console.ReadLine());

      Console.Write("while: ");
      int i = 1;           
      while (i <= n)
      {
        Console.Write(" " + i);
        i += 2;
      }

      Console.Write("do while: ");
      i = 1;
      do
{
Console.Write(" " + i);
i += 2;
}
while (i <= n);

Console.Write("For: ");
for (i = 1; i<=n; i+=2)
      {
        Console.Write(" " + i);
      }
    }
  }
}
4. Вывести на экран числа следующим образом: 
Пример:
1)	1	1	1	1	1	1
	2	2	2	2	2	2
	3	3	3	3	3	3
	4	4	4	4	4	4
						
using System;
namespace Hello
{
  class Program
  {
    static void Main()
    {
      for (int i = 1; i<=4; ++i, Console.WriteLine())
      {
        for(int j=1; j<=6; ++j)
        Console.Write(" " + i);
      }
    }
  }
}
Самостоятельная работа 
Задача 1. Дана шахматная доска размером n?n клеток. Верхняя левая клетка доски черная и имеет номер (1, 1). Например, для n=4 шахматная таблица выглядит следующим образом:
	1	2	3	4
1				
2				
3				
4				
1.	для заданного значения n определить количество черных ячеек шахматной доски; 
2.	по номеру ячейки (k, m) определить ее цвет; 
3.	определить, являются ли ячейки с номерами (k1, m1) и (k2, m2) одного цвета; 
4.	определить, находится ли фигура, стоящая в ячейке с номером (k1, m1), под ударом второй фигуры, стоящей в ячейке с номером (k2, m2), при условии, что ход второй фигуры и ей является: 
o	пешка; 
o	слон; 
o	ладья; 
o	ферзь; 
o	конь.
Задача 2. Задана дата в формате <день>.<месяц>.<год>. Определить:
1.	сколько дней прошло с начала года; 
2.	сколько дней осталось до конца года; 
3.	дату предыдущего дня; 
4.	дату следующего дня. 
Задача 3. Натуральное число из n цифр является числом Армстронга, если сумма его цифр, возведенных в n-ную степень, равна самому числу. Например, 153=13+53+33. Найти все трехзначные числа Армстронга.
Задача 4. Стороны прямоугольника заданы натуральными числами n и m. Найти количество квадратов (стороны которых выражены натуральными числами), на которые можно разрезать данный прямоугольник, если от него каждый раз отрезать квадрат: наименьшей площади; наибольшей площади.
 
Лекция 5. Методы: основные понятия. Перегрузка методов
5.1 Методы: основные понятия
Метод – это функциональный элемент класса, который реализует вычисления или другие действия, выполняемые классом или его экземпляром (объектом). Метод представляет собой законченный фрагмент кода, к которому можно обратиться по имени. Он описывается один раз, а вызываться может многократно. Совокупность методов класса определяет, что конкретно может делать класс. Например, стандартный класс Math содержит методы, которые позволяют вычислять значения математический функций. 
Синтаксис метода:
[атрибуты] [спецификторы] тип_возвращаемого_результаты  имя_метода ([список_параметров])
{
тело_метода;
return значение
}
где:
1.	Атрибуты и спецификторы являются необязательными элементами синтаксиса описания метода. На данном этапе атрибуты нами использоваться не будут, а из всех спецификаторов мы в обязательном порядке будем использовать спецификатор static, который позволит обращаться к методу класса без создания его экземпляра. 
Замечание. Остальные спецификаторы мы рассмотрим в разделе "классы".
2.	Тип_возвращаемого_результата определяет тип значения, возвращаемого методом. Это может быть любой тип, включая типы классов, создаваемые программистом. Если метод не возвращает никакого значения, необходимо указать тип void (в этом случае в теле метода отсутсвует оператор return). 
3.	Имя_метода – идентификатор, заданный программистом с учетом требований, накладываемыми на идентификаторы в С#, отличный от тех, которые уже использованы для других элементов программы в пределах текущей области видимости. 
4.	Список_параметров представляет собой последовательность пар, состоящих из типа данных и идентификатора, разделенных запятыми. Параметры — это переменные или константы, которые получают значения, передаваемые методу при вызове. Если метод не имеет параметров, то список_параметров остается пустым. 
5.	Значение определяет значение, возвращаемое методом. Тип значения должен соответствовать типу_возвращаемого_результата или приводится к нему. 
Рассмотрим простейший пример метода:
class Program
  {
     static void Func()	//дополнительный метод
     {
        Console.Write("x= ");
        double x=double.Parse(Console.ReadLine());
        double y = 1 / x;
        Console.WriteLine("y({0})={1}", x,y );
      }

      static void Main()	//точка входа в программу
      {
        Func();	//первый вызов метода Func
        Func();	//второй вызов метода Func
       }
   }

В даном примере в метод Func не передаются никакие значения, поэтому список параметров пуст. Кроме того метод ничего не возвращает, поэтому тип возвращаемого значения void. В основном методе Main мы вызвали метод Func два раза. Если будет необходимо, то данный метод можно будет вызвать еще столько раз, сколько потребуется для решения задачи. 
Задания. 
1.	Добавьте в метод Main третий вызов метода Func. 
2.	2. Преобразуйте программу так, чтобы метод Func вызывался n раз. 
Изменим исходный пример так, чтобы в него передавалось значение х, а сам метод возвращал значение y.
class Program
  {
     static double Func( double x) //дополнительный метод
     {
       return 1 / x; //Возвращаемое значение
     }

     static void Main()	//точка входа в программу
     {
       Console.Write("a=");
       double a=double.Parse(Console.ReadLine());
       Console.Write("b=");
       double b=double.Parse(Console.ReadLine());
       for (double x = a; x <= b; x += 0.5)
        {
           double y = Func(x); //вызов метода Func
           Console.WriteLine("y({0:f1})={1:f2}", x, y); 
        }
   }

В данном примере метод Func содержит параметр х, тип которого double. Для того, чтобы метод Func возвращал в вызывающий его метод Main значение выражения 1/x (тип которого double), перед именем метода указывается тип возвращаемого значения – double, а в теле метода используется оператор передачи управления – return. Оператор return завершает выполнение метода и передает управление в точку его вызова.
Задания. Преобразуйте программу так, чтобы метод Func возвращал значение выражения: 
1.	x2; 
2.	 
Рассмотрим другой пример:
class Program
    {
        static int Func( int x, int y)	//строка 1
        {
            return (x>y)? x:y;
        }

        static void Main()
        {
            Console.Write("a=");
            int a = int.Parse(Console.ReadLine());
            Console.Write("b=");
            int b = int.Parse(Console.ReadLine());
            Console.Write("c=");
            int c = int.Parse(Console.ReadLine());
            int max = Func(Func(a, b), c);	//строка 2 - вызовы метода Func
            Console.WriteLine("max({0}, {1}, {2})={3}", a, b, c, max);     
        }
      }

В данном примере метод Func имеет два целочисленных параметра – x, y, а в качестве результата метод возвращает наибольшее из них. На этапе описания метода (строка 1) указываются формальные параметры, на этапе вызова (строка 2) в метод передаются фактические параметры, которые по количеству и по типу совпадают с формальными параметрами. Если количество фактических и формальных параметров будет различным, то компилятор выдаст соответствующее сообщение об ошибке. Если параметры будут отличаться типами, то компилятор попытается выполнить неявное преобразование типов. Если неявное преобразование невозможно, то также будет сгенерирована ошибка. 
Обратите внимание на то, что при вызове метода Func использовалось вложение одного вызова в другой.
Задание. Преобразуйте программу так, чтобы с помощью метода Func можно было найти наибольшее значение из четырех чисел: a, b, c, d. Метод Func при этом не изменять.
В общем случае параметры используются для обмена информацией между вызывающим и вызываемым методами. В С# для обмена предусмотрено четыре типа параметров: параметры-значения, параметры-ссылки, выходные параметры, параметры-массивы.
При передаче параметра по значению метод получает копии параметров, и операторы метода работают с этими копиями. Доступа к исходным значениям параметров у метода нет, а, следовательно, нет и возможности их изменить.
Замечание. Все примеры, рассмотренные ранее, использовали передачу данных по значению.
Рассмотрим небольшой пример:
class Program
  {
    static void Func(int x)
     {
        x += 10;	// изменили значение параметра 
        Console.WriteLine("In Func: " + x);
      }

     static void Main()
      {
         int a=10;
         Console.WriteLine("In Main: "+ a);
         Func(a);
        Console.WriteLine("In Main: " + a);
      }
  }

Результат работы программы:
In Main: 10	
In Func: 20
In Main: 10
В данном примере значение формального параметра х было изменено в методе Func, но эти изменения не отразились на фактическом параметре а метода Main.
При передаче параметров по ссылке метод получает копии адресов параметров, что позволяет осуществлять доступ к ячейкам памяти по этим адресам и изменять исходные значения параметров. Для того чтобы параметр передавался по ссылке, необходимо при описании метода перед формальным параметром и при вызове метода перед соответствующим фактическим параметром поставить служебное слово ref. 
class Program
  {
     static void Func(int x, ref int y)
     {
       x += 10; y += 10;  //изменение параметров
       Console.WriteLine("In Func: {0}, {1}", x, y);
      }

     static void Main()
     {
        int a=10, b=10;  // строка 1
        Console.WriteLine("In Main: {0}, {1}", a, b);
        Func(a, ref b);
        Console.WriteLine("In Main: {0}, {1}", a, b);
      }
  }

Результат работы программы:
In Main: 10  10	
In Func: 20  20
In Main: 10  20
В данном примере в методе Func были изменены значения формальных параметров х и y. Эти изменения не отразились на фактическом параметре а, т.к. он передавался по значению, но значение b было изменено, т.к. он передавался по ссылке. 
Передача параметра по ссылке требует, чтобы аргумент был инициализирован до вызова метода (см. строку 1). Если в этой строке не проводить инициализацию переменных, то компилятор выдаст сообщение об ошибке. 
Однако в некоторых случаях бывает невозможно инициализировать параметр до вызова метода. Тогда параметр следует передавать как выходной, используя спецификатор out.
class Program
  {
   static void Func(int x, out int y)
     {
       x += 10; y = 10;   // определение значения выходного параметра y
       Console.WriteLine("In Func: {0}, {1}", x, y);
      }

      static void Main()
      {
        int a=10, b;
        Console.WriteLine("In Main: {0}", a);
        Func(a, out b);
        Console.WriteLine("In Main: {0}, {1}", a, b);
      }
  }

Результат работы программы:
In Main: 10 	
In Func: 20  10
In Main: 10  10
В данном примере в методе Func формальный параметр y и соответствующий ему фактический параметр b метода Main были помечены спецификатором out. Поэтому значение b до вызова метода Func можно было не определять, но изменение параметра y отразились на изменении значения параметра b.
Замечание. Параметры-массивы будут рассмотрены позже.
5.2 Перегрузка методов
Иногда бывает удобно, чтобы методы, реализующие один и тот же алгоритм для различных типов данных, имели одно и то же имя. Использование нескольких методов с одним и тем же именем, но различными типами и количеством параметров называется перегрузкой методов. Компилятор определяет, какой именно метод требуется вызвать, по типу и количеству фактических параметров. 
Рассмотрим следующий пример:
class Program
  {
     static int max(int a)	//первая версия метода max
      {
         int b = 0;
         while (a > 0)
         {
            if (a % 10 > b) b = a % 10;
            a /= 10;
          }
         return b;
      }

      static int max(int a, int b) //вторая версия метода max
       {
         if (a > b) return a;
         else return b;
       }
        
      static int max(int a, int b, int c) //третья версия метода max
      {
         if (a > b && a > c) return a;
         else if (b > c) return b;
         else return c;
      }

      static void Main()
      {
         int a = 1283, b = 45, c = 35740;
         Console.WriteLine(max(a));
         Console.WriteLine(max(a, b));
         Console.WriteLine(max(a, b, c));
      }
  }

При вызове метода max компилятор выбирает вариант, соответствующий типу и количеству передаваемых в метод аргументов. Если точного соответствия не найдено, выполняются неявные преобразования типов в соответствии с общими правилами. Если преобразование невозможно, выдается сообщение об ошибке. Если выбор перегруженного метода возможен более чем одним способом, то выбирается "лучший" из вариантов (вариант, содержащий меньшие количество и длину преобразований в соответствии с правилами преобразования типов). Если существует несколько вариантов, из которых невозможно выбрать лучший, выдается сообщение об ошибке.
Перегрузка методов является проявлением полиморфизма, одного из основных свойств ООП. Программисту гораздо удобнее помнить одно имя метода и использовать его для работы с различными типами данных, а решение о том, какой вариант метода вызвать, возложить на компилятор. Этот принцип широко используется в классах библиотеки .NET. Например, в стандартном классе Console метод WriteLine перегружен 19 раз для вывода величин разных типов.
Практикум
1.	Разработать метод  для нахождения минимального из двух чисел. Вычислить с помощью него значение выражения  . 
Пример. 
using System;
namespace Hello
{
 class Program
 {
  static double min(double a, double b)
  {
   return (a < b) ? a : b;
  }

  static void Main(string[] args)
  {
   Console.Write("x=");
   double x = double.Parse(Console.ReadLine());
   Console.Write("y=");
   double y = double.Parse(Console.ReadLine());
   double z = min(3 * x, 2 * y) + min(x - y, x + y);
   Console.WriteLine("z=" + z);
  }
 }
}
2.	Постройте таблицу значений функции  для  с шагом  . 
Замечание. Для решения задачи использовать вспомогательный метод.
 
Пример:
using System;
namespace Hello
{
 class Program
 {
  static double f (double x)
  {
  double y;
  if (x >= 0.9) y = 1 / Math.Pow(1 + x, 2);
  else if (x >= 0) y = 0.2 * x + 0.1;
  else y = x * x + 0.2;
  return y;
 }

 static void Main(string[] args)
{
  Console.Write("a=");
  double a = double.Parse(Console.ReadLine());
  Console.Write("b=");
  double b = double.Parse(Console.ReadLine());
  Console.Write("h=");
  double h = double.Parse(Console.ReadLine());
  for (double i = a; i <= b; i += h)
  Console.WriteLine("f({0:f2})={1:f4}", i, f(i));
  }
 }
}
3.	Перегрузите метод  из предыдущего раздела так, чтобы его сигнатура (заголовок) соответствовала виду static void f (double x, out double y). Продемонстрируйте работу перегруженных методов. 
Самостоятельная работа 
Теоретический материал
Пусть a1, a2, …, an - произвольная числовая последовательность. Рекуррентным соотношением называется такое соотношение между членами последовательности, в котором каждый следующий член выражается через несколько предыдущих, т.е ak = f(ak-1, ak-2, …, ak-l, l < k (1).
Последовательность задана рекуррентно, если для нее определено рекуррентное соотношение вида (1) и заданы первые l ее членов.
Самым простым примером рекуррентной последовательности является арифметическая прогрессия. Рекуррентное соотношение для нее записывается в виде: ak = ak-1 + d, где d - разность прогрессии. Зная первый элемент и разность прогрессии, и, используя данное рекуррентное соотношение, можно последовательно вычислить все остальные члены прогрессии. 
Рассмотрим пример программы, в которой вычисляются первые n членов арифметической прогрессии при условии, что a1=1/2 и d=1/4.
static void Main()
 {
   Console.Write("a=");
   double a = double.Parse(Console.ReadLine());
   Console.Write("h=");
   double d = double.Parse(Console.ReadLine());
   Console.Write("n=");
   int d = int.Parse(Console.ReadLine());
   Console.WriteLine("a1="+ a);	//вывели первый член последовательности
   //организуем вычисление 2, 3, … ,n члена последовательности
   for (int i = 2; i <= n; ++i)
  {
    a += d;		//для этого прибавляем к предыдущему члену значение d
    Console.WriteLine("a{0}={1}", i, a);	//и выводим новое значение а на экран
  }
}
Результат работы программы: 
n	состояние экрана
5
a1: 0.5
a2: 0.75 
a3: 1.
a4: 1.25
a5: 1.5
Более сложная зависимость представлена в последовательности Фибоначчи: a1 = a2= 1, an = an-1 + an-2. В этом случае каждый член последовательности зависит от значений двух предыдущих членов. Рассмотрим пример программы, в которой вычисляются первые n членов последовательности Фибоначчи.
static void Main()
{//задали известные члены последовательности
 int a1=1, a2=1, a3;	
 Console.Write("n=");
 int n = int.Parse(Console.ReadLine());
 //вывели известные члены  последовательности
 Console.WriteLine("a1={0}\na2={1}",a1,a2);	
 
/*Организуем цикл для вычисления членов последовательности с номерами 3 4…n. 
При этом в переменной a1 будет храниться значение члена последовательности с номером i-2,в переменной a2 -  члена с номером i-1, переменная а будет использоваться для вычисления члена с номером i. */

for (int i = 3; i <= n; ++i)
{
 //по рекуррентному соотношению вычисляем член последовательности с номером i    //и выводим его значение на экран
a3=a1+a2;	
Console.WriteLine("a{0}={1}", i, a3); 
 //выполняем рекуррентный пересчет для следующего шага цикла                
 a1 = a2;	//в элемент с номером i-2 записываем значение элемента с   номером i-1
  a2 = a3;	 //в элемент с номером i-1 записываем значение элемента с номером i
 }
}
Результат работы программы: 
n	состояние экрана
5	a1: 1
  	a2: 1 
 	a3: 2
 	a4: 3
 	a5: 5
 
Лекция 6. Рекурсивные методы 
6.1 Прямая рекурсия 
Рекурсивным называют метод, если он вызывает сам себя в качестве вспомогательного. В основе рекурсивного метода лежит так называемое "рекурсивное определение" какого-либо понятия. Классическим примером рекурсивного метода является метод, вычисляющий факториал. 
Из курса математики известно, что 0!=1!=1, n!=1*2*3…*n. С другой стороны n!=(n-1)!*n. Таким образом, известны два частных случая параметра n, а именно n=0 и n=1, при которых мы без каких-либо дополнительных вычислений можем определить значение факториала. Во всех остальных случаях, то есть для n>1, значение факториала может быть вычислено через значение факториала для параметра n-1. Таким образом, рекурсивный метод будет иметь вид:
{
   static long F(int n)  //рекурсивный метод
   {
      if (n==0 || n==1) 
       return 1;    //нерекурсивная ветвь
       else return n*F(n-1);  //шаг рекурсии - повторный вызов метода с другим параметром
    }

    static void Main()
    {
      Console.Write("n=");
       int n =int.Parse( Console.ReadLine());
       long f=F(n); //нерекурсивный вызов метода F
       Console.WriteLine("{0}!={1}",n, f); 
      }
}

Рассмотрим работу описанного выше рекурсивного метода для n=3. 
 

Первый вызов метода осуществляется из метода Main, в нашем случае командой f=F(3). Этап вхождения в рекурсию обозначим жирными стрелками. Он продолжается до тех пор, пока значение переменной n не становится равной 1. После этого начинается выход из рекурсии (тонкие стрелки). В результате вычислений получается, что F(3)=3*2*1.
Рассмотренный вид рекурсии называют прямой. Метод с прямой рекурсией обычно содержит следующую структуру:
if (<условие>)  
<оператор>; 
else <вызов данного метода с другими параметрами>; 
В качестве <условия> обычно записываются некоторые граничные случаи параметров, передаваемых рекурсивному методу, при которых результат его работы заранее известен, поэтому далее следует простой оператор или блок, а в ветви else происходит рекурсивный вызов данного метода с другими параметрами. 
Что необходимо знать для реализации рекурсивного процесса? Со входом в рекурсию осуществляется вызов метода, а для выхода необходимо помнить точку возврата, т.е. то место программы откуда мы пришли и куда нам нужно будет возвратиться после завершения метода. Место хранения точек возврата называется стеком вызовов и для него выделяется определенная область оперативной памяти. В этом стеке запоминаются не только адреса точек возврата, но и копии значений всех параметров. По этим копиям восстанавливается при возврате вызывающий метод. При развертывании рекурсии за счет создания копий параметров возможно переполнение стека. Это является основным недостатком рекурсивного метода. С другой стороны, рекурсивные методы позволяют перейти к более компактной записи алгоритма.
Следует понимать, что любой рекурсивный метод можно преобразовать в обычный метод. И практически любой метод можно преобразовать в рекурсивный, если выявить рекуррентное соотношение между вычисляемыми в методе значениями.
Далее для сравнения каждую задачу будем решать с использованием обычного и рекурсивного методов:
Пример 1: Найти сумму цифр числа А.
Известно, что любое натуральное число A=an an-1… a1 a0, где an an-1… a1 a0 - цифры числа, можно представить следующим образом: 
A=an an-1… a1 a0 = A=an*10n + an-1*10n-1 + … a1*101 + a0*100 = ((…((an*10 + an-1)*10+ an-2)*10…)*10 + a1)*10 + a0 
Например, число 1234 можно представить как:
1234 = 1*103 + 2*102 + 3*101 + 4*100 = ((1*10 + 2)*10 + 3)*10 + 4
Из данного представления видно, что получить последнюю цифру можно, если найти остаток от деления числа на 10. В связи с этим для разложения числа на составляющие его цифры можно использовать следующий алгоритм:
1.	Находим остаток при делении числа А на 10, т.е. получаем крайнюю правую цифру числа. 
2.	Находим целую часть числа при делении A на 10, т.е. отбрасываем от числа A крайнюю правую цифру. 
3.	Если преобразованное A > 0, то переходим на пункт 1. Иначе число равно нулю и отделять от него больше нечего. 
Данный алгоритм будет использоваться при разработке нерекурсивного метода. 
С другой стороны, сумму цифр числа 1234 можно представить следующим образом sum(1234)=sum(123)+4=(sum(12)+3)+4=(((sum(1)+2)+3)+4)=(((sum(0)+1)+2)+3)+4. Таким образом, если А=0, то сумма цифр числа также равна нулю, т.е. sum=0. В противном случае сумму цифр числа A можно представить рекуррентным соотношением sum(A)=sum(A/10)+A%10. Полученное рекуррентное соотношение будем использовать при разработке рекурсивного метода.
  class Program
  {
    static long Sum(long a) //нерекусивный метод
    {
      long sum=0;
      while (a>0) //пока a больше нуля
      {
        sum+=a%10;  //добавляем к сумме последнюю цифру числа а
        a/=10;   //отбрасываем от числа а последнюю цифру
      }
      return sum;  //возвращаем в качестве результата сумму цифр числа a
    }

    static long SumR(long a) //рекурсивный метод
    {
      if (a==0) //если a =0, то
                 return 0; // возвращаем 0
      else return SumR(a/10)+ a%10; //иначе обращаемся к рекуррентному соотношению
    }

    static void Main()
    {
      Console.Write("n=");
      long n=long.Parse(Console.ReadLine());
      Console.WriteLine("Нерекурсивный метод: "+Sum(n));
      Console.WriteLine("Рекурсивный метод: "+SumR(n));
    }  
  }
}

Задание. Изменить методы так, чтобы на экран выводилось количество цифр в числе n.
Пример 2: вычислить n-ный член последовательности Фиббоначи.
Первые два члена последовательности Фиббоначи равны 1, остальные получаются по рекуррентной формуле an=an-1+an-2. 
  class Program
  {
    static int Fb(int n) //нерекурсивный алгоритм
    {
      int a, a1=1, a2=1;
      if (n==1||n==2) return 1;
      else 
      {
        for (int i=2; i<=n; ++i) 
        {
          a=a1+a2;
          a1=a2;
          a2=a;
        }
        return a1;
      }
    }

    static int FbR(int n) //рекурсивный алгоритм
    {
      if (n==1 || n==2 )return 1;
        else return FbR(n-1)+FbR(n-2);
    }

    static void Main()
    {
      Console.Write("n=");
      int n=int.Parse(Console.ReadLine());
      Console.WriteLine("Нерекурсивный метод: "+Fb(n));
      Console.WriteLine("Рекурсивный метод: "+FbR(n));
    }    
  }

Задание. Изменить методы так, чтобы на экран выводилась сумма n элементов последовательности Фиббоначи.
Рассмотренные выше рекурсивные методы возвращали некоторое значение, заданное рекуррентным соотношением. Однако, как мы знаем, не все методы возвращают значение. Кроме того, рассмотренные выше методы определяют простой вариант рекурсивного метода. В общем случае рекурсивный метод включает в себя некоторое множество операторов и один или несколько операторов рекурсивного вызова. Действия могут выполняться после рекурсивного вызова, до рекурсивного вызова, а также и до, и после рекурсивного вызова. Рассмотрим примеры "сложных" рекурсивных методов, не возвращающих значение.
Пример 3. Для заданного значения n вывести на экран n строк, в каждой из которых содержится n звездочек. Например, для n=5 на экран нужно вывести следующую таблицу:
*
**
***
****
*****

  class Program
  {
    static void Stroka(int n) //выводит на экран строку из n звездочек
    {
      for (int i=1; i<=n; ++i)
      {
        Console.Write('*');
      }
      Console.WriteLine();
    }

    static void Star(int n) //нерекурсивный метод
    {
      for (int i=1; i<=n;++i) //выводит n строк по i звездочек в каждой
        Stroka(i);
    }
  
    //рекурсивный метод, где i – номер текущей строки, n – номер последней строк 
    static void StarR(int i,int n) 
    {
      if (i<=n ) //если номер текущей строки не больше номера последней строки, то
      {
        Stroka(i); //выводим i звездочек в текущей строке и 
        StarR(i+1,n); //переходим к формированию следующей строки
      }
    }

    static void Main()
    {
      Console.Write("n=");
      int n=int.Parse(Console.ReadLine());
      Console.WriteLine("Нерекурсивный метод: ");
      Star(n);
      Console.WriteLine("Рекурсивный метод: ");
      StarR(1,n); // параметр 1 – это номер первой строки, n – номер последней строки
    }  
  }

Задание. Изменить методы так, чтобы для заданного значения n (в нашем случае для n=5) на экран выводилась следующая таблица: 
*****
****
***
**
*
Пример 4. Для заданного значения n (например для n=7) вывести на экран следующую таблицу:
* * * * * * *
  * * * * *
    * * *
      *
      *
    * * *
  * * * * *
* * * * * * *

Данную таблицу условно можно разделить на две части. Рассмотрим отдельно верхнюю часть:
Номер строки 	Содержимое экрана 	i - количество пробелов в строке 	Количество звездочек в строке 
0 	******* 	0 	7 
1 	***** 	1 	5 
2 	*** 	2 	3 
3 	* 	3 	1 
Таким образом, если нумеровать строки с нуля, то номер строки совпадает с количеством пробелов, которых нужно напечатать в начале этой строки. При этом количество звездочек в строке, можно определить по формуле n-2i, где n – это количество звездочек в нулевой строке. Так как количество звездочек в каждой строке уменьшается на 2, то всего нужно напечатать n/2+1 строк.
Аналогичную зависимость можно выявить и для нижней части таблицы.
class Program
  {
    static void Stroka(int n, char a) //выводит на экран n раз символ а 
    {
      for (int i=1; i<=n; ++i)
      {
        Console.Write(a);
      }
    }

    static void Star(int n) //нерекурсивный метод
    {
      for (int i=0; i<=n/2;++i) //выводим верхнюю часть таблицы, в которой в каждой строке вначале
      { 
        Stroka(i,' '); //печатаем пробелы
        Stroka(n-2*i,'*'); //затем звездочки
        Console.WriteLine(); //затем переводим курсор на новую строку
      }
      for (int i=n/2; i>=0;--i) // аналогично выводим нижнюю часть таблицы
      { 
        Stroka(i,' ');
        Stroka(n-2*i,'*');
        Console.WriteLine();
      }
    }
  
    //рекурсивный метод, где i определяет номер текущей строки, n – количество звездочек в строке 
    static void StarR(int i, int n) 
    {
      if (n>0 ) 
      {
        //действия до рекурсивного вызова – позволят вывести верхнюю часть таблицы 
        Stroka(i, ' ');
        Stroka(n, '*'); 
        Console.WriteLine(); 
        //вызываем этот же метод, увеличивая номер строки, и уменьшая количество звездочек в ней
        StarR(i+1,n-2);  
        //действия после рекурсивного вызова – позволят вывести нижнюю часть таблицы
        Stroka(i, ' ');
        Stroka(n, '*');
        Console.WriteLine();
      }
    }

    static void Main()
    {
      Console.Write("n=");
      int n=int.Parse(Console.ReadLine());
      Console.WriteLine("Нерекурсивный метод: ");
      Star(n);
      Console.WriteLine("Рекурсивный метод: ");
      StarR(0,n);
    }      
  }
}

Задание. Изменить методы так, чтобы для заданного значения n (в нашем случае для n=7) на экран выводилась следующая таблица: 
      *
    * * *
  * * * * *
* * * * * * *
* * * * * * *
  * * * * * 
    * * *
      *

6.2 Косвенная рекурсия 
Все примеры, рассмотренные ранее, относились к прямой рекурсии. Однако существует еще и косвенная рекурсия, в которой метод вызывает себя в качестве вспомогательного не непосредственно, а через другой вспомогательный метод. Косвенную рекурсию демонстрирует следующая программа, которая для заданного значения n выводит на экран следующее за ним простое число.
Данная программа содержит метод Prim, который возвращает true, если его параметр является простым числом, false – в противном случае. Чтобы установить, является ли число j простым, нужно проверить делимость числа j на все простые числа, не превышающие квадратный корень из j. Перебор таких простых чисел можно организовать так: рассмотреть первое простое число – 2, а затем, используя метод NextPrim, возвращающий следующее за значением ее параметра простое число, получить все простые числа, не превышающие квадрата числа j. В свою очередь метод NextPrim обращается к методу Prim для того, чтобы определить является ли заданное число простым. 
Таким образом методы Prim и NextPrim перекрестно вызывают друг друга. В этом и проявляется косвенная рекурсия.
class Program
   {
      static bool Prim (int j)
      {
         int k=2; //первое простое число
         //значение k "пробегает" последовательность простых чисел, начиная с 2 до корня из j, при
         //этом проверяется делится ли j на одно из таких простых чисел
         while (k*k<=j && j%k!=0)
            k=NextPrim(k); //вызов метода NextPrim
         return (j%k==0)?false:true;
      }

      static int NextPrim(int i)
      {
         int p=i+1;
         while (!Prim(p))	//вызов метода Prim
            ++p;
         return p;
      }

      static void Main()
      {
         Console.Write("n=");
         int n=int.Parse(Console.ReadLine());
         Console.WriteLine("Следующее за {0} простое число равно {1}.", n, NextPrim(n));
      }  
   }

Задание. Изменить программу так, чтобы на экран выводились все простые числа меньшие N.
Рекурсия является удобным средством решения многих задач: сортировки числовых массивов, обхода таких структур данных как деревья и графы.
С другой стороны, применение рекурсивных методов в ряде случаев оказывается нерациональным. Вспомним рекурсивный метод подсчета n-ного члена последовательности Фиббоначи. Данный метод будет работать весьма неэффективно. FbR(17) вычисляется в ней как FbR(16)+ FbR(15). В свою очередь FbR(16) вычисляется в ней как FbR(15)+ FbR(14). Таким образом, FbR(15) будет вычисляться 2 раза, FbR(14) – 3 раза, FbR(13) – 5 раз и т.д. Всего для вычисления FbR(17) потребуется выполнить более тысячи операций сложения. Для сравнения при вычислении Fb(17), т.е. используя не рекурсивный метод, потребуется всего лишь 15 операций сложения.
Таким образом, при разработке рекурсивного метода следует задуматься об его эффективности.
Самостоятельная работа 
Задача 1. Разработать рекурсивный метод для вывода на экран всех возможных разложений натурального числа n на множители (без повторений). Например, для n=12 на экран должно быть выведено:
2*2*3=12
2*6=12
3*4=12 
Задача 2. Разработать рекурсивный метод для вывода на экран всех возможных разложений натурального числа n на слагаемые (без повторений). Например, для n=5 на экран должно быть выведено:
1+1+1+1+1=5
1+1+1+2=5
1+1+3=5
1+4=5
2+1+2=5
2+3=5

 
Лекция 7. Обработка исключений
Язык С#, как и многие другие объектно-ориентированные языки, реагирует на ошибки и ненормальные ситуации с помощью механизма обработки исключений. Исключение - это объект, генерирующий информацию о "необычном программном происшествии". При этом важно проводить различие между ошибкой в программе, ошибочной ситуацией и исключительной ситуаций. 
Ошибка в программе допускается программистом при ее разработке. Например, вместо операции сравнения (==) используется операция присваивания (=). Программист должен исправить подобные ошибки до передачи кода программы заказчику. Использование механизма обработки исключений не является защитой от ошибок в программе.
Ошибочная ситуация вызвана действиями пользователя. Например, пользователь вместо числа ввел строку. Такая ошибка способна вызывать исключение. Программист должен предвидеть ошибочные ситуации и предотвращать их с помощью операторов, проверяющих допустимость поступающих данных.
Даже если программист исправил все свои ошибки в программе, предвидел все ошибочные ситуации, он все равно может столкнуться с непредсказуемыми и неотвратимыми проблемами - исключительными ситуациями. Например, нехваткой доступной памяти или попыткой открыть несуществующий файл. Исключительные ситуации программист предвидеть не может, но он может отреагировать на них так, что они не приведут к краху программы. 
Для обработки ошибочных и исключительных ситуаций в С# используется специальная подсистема обработки исключений. Преимущество данной подсистемы состоит в автоматизации создания большей части кода по обработке исключений. Раньше этот код приходилось вводить в программу "вручную". Кроме этого обработчик исключений способен распознавать и выдавать информацию о таких стандартных исключениях, как деление на нуль или попадание вне диапазона определения индекса.
7.1 Оператор try
В С# исключения представляются классами. Все классы исключений порождены от встроенного класса исключений Exception, который определен в пространстве имен System.
Управление обработкой исключений основывается на использовании оператора try. Синтаксис оператора: 
try	// контролируемый блок
{ 
…
}
catch //один или несколько блоков обработки исключений
{ 
…
}
finally	//блок завершения
{
…
}
Программные инструкции, которые нужно проконтролировать на предмет исключений, помещаются в блок try. Если исключение возникает в этом блоке, оно дает знать о себе выбросом определенного рода информации. Выброшенная информация может быть перехвачена и обработана соответствующим образом с помощью блока catch. Любой код, который должен быть обязательно выполнен при выходе из блока try, помещается в блок finally. Рассмотрим пример, демонстрирующий, как отследить и перехватить исключение.
static void Main()
{
int  x = int.Parse(Console.ReadLine());
int y =1 / x; 
Console.WriteLine(y);
}
Перечислим, какие исключительные ситуации могут возникнуть:
1.	пользователь может ввести нечисловое значение 
2.	если ввести значение 0, то произойдет деление на 0. 
Создайте указанные исключительные ситуации и посмотрите, как отреагирует на них система. 
Задание. Переменные x и y объявлены целочисленными. Объясните, что будет выведено на экран, если замените их тип на double и ввести с клавиатуры значение х равное 0, и почему. 
Теперь попробуем обработать эти ситуации. Для этого изменим код следующим образом. 
static void Main()
{ 
  try
  {
    int x = int.Parse(Console.ReadLine());    
    int y =1 / x;
Console.WriteLine("y={0}", y);
    Console.WriteLine("блок try выполнилсь успешно");
  }
  catch		// *
  {
    Console.WriteLine("возникла какая-то ошибка");
  }
  Console.WriteLine("конец программы");
}
Рассмотрим, как обрабатываются исключения в данном примере. Когда возникает исключение, выполнение программы останавливается и управление передается блоку catch. Этот блок никогда не возвращает управление в то место программы, где возникло исключение. Поэтому команды из блока try, расположенные ниже строки, в которой возникло исключение, никогда не будут выполнены. Блок catch обрабатывает исключение, и выполнение программы продолжается с оператора, следующего за этим блоком.
В нашем случае при вводе нечислового значения или 0 будет выведено сообщение "возникла ошибка", а затем сообщение "конец программы".
Обработчик исключений позволяет не только отловить ошибку, но и вывести полную информацию о ней. Для демонстрации сказанного заменим блок catch следующим фрагментом. 
catch (Exception error)
{
  Console.WriteLine("Возникла ошибка {0}", error);
}
Теперь, если возникнет исключительная ситуация, "выброшенная" информация будет записана в идентификатор error. Данную информацию можно просмотреть с помощью метода WriteLine. Такое сообщение очень полное и будет полезно только разработчику на этапе отладки проекта. 
Для пользователя на этапе эксплуатации приложения достаточно более краткой информации о типе ошибке. С этой целью в С# выделены стандартные классы исключений, такие как DivideByZeroException, FormatException. Внесем изменения в программу.
static void Main()
{ 
  try
  {
    int x = int.Parse(Console.ReadLine());    // 1 ситуация              
    int y =1 / x;   // 2 ситуация
    Console.WriteLine("y={0}", y);
    Console.WriteLine("блок try выполнилсь успешно");
  }
  catch(FormatException)  // обработка 1 ситуации
  {
    Console.WriteLine("Ошибка: введено нечисловое значение!");                
  }
  catch (DivideByZeroException) // обработка 2 ситуации
  {
    Console.WriteLine("Ошибка: деление на 0!");
  }
  Console.WriteLine("конец программы");
}
В данном примере обрабатывается каждая ситуация в отдельности, при этом пользователю сообщается лишь минимальная информация об ошибке. В следующей таблице содержится описание наиболее часто используемых обработчиков стандартных исключений.
Имя	Описание
ArithmeticException	Ошибка в арифметических операциях или преобразованиях
ArrayTypeMismatchException	Попытка сохранения в массиве элемента несовместимого типа 
DivideByZeroException	Попытка деления на ноль
FormatException	Попытка передать в метод аргумент неверного формата
IndexOutOfRangeException	Индекс массива выходит за границу диапазона
InvalidCastException	Ошибка преобразования типа
OutOfMemoryException	Недостаточно памяти для нового объекта
OverflowException	Переполнение при выполнении арифметических операций
StackOverflowException	Переполнение стека
Одно из основных достоинств обработки исключений состоит в том, что она позволяет программе отреагировать на ошибку и продолжить выполнение. Рассмотрим программу, которая строит таблицу значений для функции вида y(x)=100/(x2-1). 
static void Main()
{
 Console.WriteLine("a=");
 int a = int.Parse( Console.ReadLine());
 Console.WriteLine("b=");
 int b = int.Parse(Console.ReadLine());
 for (int i = a; i <= b; ++i)
 {
  try
  {
   Console.WriteLine("y({0})={1}", i, 100 / (i * i - 1));
  }
  catch (DivideByZeroException)
  {
   Console.WriteLine("y({0})=Деление на 0", i);
  }
 }
}
Если встречается деление на нуль, генерируется исключение типа DivideByZeroException. В программе это исключение обрабатывается выдачей сообщения об ошибке, после чего выполнение программы продолжается. При этом попытка разделить на нуль не вызывает внезапную динамическую ошибку (т.к. блок обработки прерываний помещен внутрь цикла for). Вместо этого исключение позволяет красиво выйти из ошибочной ситуации и продолжить выполнение программы.
7.2 Операторы checked и unchecked
В С# предусмотрено специальное средство, которое связано с генерированием исключений, вызванных переполнением результата в арифметических вычислениях. Например, когда значение арифметического выражения выходит за пределы диапазона, определенного для типа данных выражения. Рассмотрим небольшой фрагмент программы:
static void Main()
{
 byte x = 200; byte y = 200;
 byte result = (byte) (x + y);
 Console.WriteLine(result);
}
Здесь сумма значений а и b превышает диапазон представления значений типа byte. Следовательно, результат данного выражения не может быть записан в переменную result, тип которой byte.
Для управления подобными исключениями в С# используются операторы checked и unchecked. Чтобы указать, что некоторое выражение должно быть проконтролировано на предмет переполнения, используйте ключевое слово checked. А чтобы проигнорировать переполнение, используйте ключевое слово unchecked. В последнем случае результат будет усечен так, чтобы его тип соответствовал типу-результату выражения.
Замечание. По умолчанию проверка переполнения отключена (галочка не стоит). В результате код выполняется быстро, но тогда программист должен быть уверен, что переполнения не случится или предусмотреть его возникновение. Как мы уже упоминали, можно включить проверку переполнения для всего проекта, однако она не всегда нужна. С помощью использования операторов checked и unchecked в С# реализуется механизм гибкого управления проверкой
Можно задать (или отключить) проверку переполнения сразу для всего проекта. Для этого необходимо выполнить следующие действия
1.	Щелкнуть правой кнопкой мыши на имени проекта 
2.	В выпадающем меню выбрать Properties 
3.	В появившемся окне (см. рис.) выбрать слева страницу Build 
4.	Щелкнуть на кнопке Advanced 
5.	В появившемся окошке поставить или убрать галочку напротив Check for arithmetic overflow/underflow property. 
 


Оператор checked имеет две формы:
1.	проверяет конкретное выражение и называется операторной checked-формой 
2.	checked ((тип-выражения) expr)
где expr — выражение, значение которого необходимо контролировать. Если значение контролируемого выражения переполнилось, генерируется исключение типа OverflowException.
3.	проверяет блок инструкций 
4.	checked 
5.	{
6.	 // Инструкции, подлежащие проверке.
7.	}
Оператор unchecked также имеет две формы:
1.	операторная форма, которая позволяет игнорировать переполнение для заданного выражения 
2.	unchecked ((тип-выражения) expr)
где ехрr — выражение, которое не проверяется на предмет переполнения. В случае переполнения это выражение усекается.
3.	игнорирует переполнение, которое возможно в блоке инструкций 
4.	unchecked 
5.	{
6.	 // Инструкции, для которых переполнение игнорируется.
7.	}
Рассмотрим пример программы, которая демонстрирует использование checked и unchecked.
static void Main()
{
 byte x = 200; byte y = 200;
 try
 {
  byte result = unchecked((byte)(x + y)); 
  Console.WriteLine("1: {0}", result);
  result = checked((byte)(x + y));
  Console.WriteLine("2: ", result);
 }
 catch (OverflowException)
 {
  Console.WriteLine("возникло переполнение");
 }
}
Результат выполнения программы:
1: 144
возникло переполнение
Задание. Уберите блок uncheсked. Посмотрите, что изменится в выполнении программы и дайте этому объяснение
В данном примере мы посмотрели, как использовать checked и uncheсked для проверки выражения. А теперь посмотрим, как использовать их для контроля за блоком инструкций.
static void Main()
{
 byte n = 1; byte i;
 try
 {
  unchecked	//блок без проверки
  {
   for (i = 1; i < 10; i++) n *= i;
   Console.WriteLine("1: {0}", n);
  }
  checked 	//блок с проверкой
  {
   n=1;
   for (i = 1; i < 10; i++) n *= i;
   Console.WriteLine("2: ", n);
  }
 }
 catch (OverflowException)
 {
  Console.WriteLine("возникло переполнение");
 }
}
Результат выполнения программы:
1: 128
возникло переполнение
Задание. Поменяйте местами блоки unchecked и checked. Посмотрите, что изменится в выполнении программы и дайте этому объяснение
7.3 Генерация собственных исключений
До сих пор мы рассматривали исключения, которые генерирует среда, но сгенерировать исключение может и сам программист. Для этого необходимо воспользоваться оператором throw, указав параметры, определяющие вид исключения. Параметром должен быть объект, порожденный от стандартного класса System.Exception. Этот объект используется для передачи информации об исключении обработчику.
static void Main()
{
 try
 {
  int x = int.Parse(Console.ReadLine());
  if (x < 0) throw new Exception(); //1
  Console.WriteLine("ok");
 }
 catch 
 {
  Console.WriteLine("введено недопустимое значение");
 }
}
В строчке 1 c помощью команды new был создан объект исключения типа Exception. При необходимости можно генерировать исключение любого типа.
При генерации исключения можно определить сообщение, которое будет "выбрасываться" обработчиком исключений. Например:
static void Main()
{
 try
 {
  int x = int.Parse(Console.ReadLine());
  if (x < 0) throw new Exception("введено недопустимое значение"); //1
  Console.WriteLine("ok");
 }
 catch (Exception error)
 {
  Console.WriteLine(error.Message);
 } 
}
7.4 Приемы использования обработчиков исключений
Рассмотрим несколько полезных приемов использования обработчиков исключений.
Пример 1. Один try-блок можно вложить в другой. Исключение, сгенерированное во внутреннем try-блоке и не перехваченное catch-инструкцией, которая связана с этим try-блоком, передается во внешний try-блок. Например, в следующей программе исключение типа ArithmeticException перехватывается не внутренним try-блоком, а внешним.
static void Main()
{
 Console.WriteLine("a=");
 byte a = byte.Parse(Console.ReadLine());
 Console.WriteLine("b=");
 byte b = byte.Parse(Console.ReadLine());
 int f=1;
 try //Внешний блок-try
 {
  for (byte i = a; i <= b; ++i)
  {
   try //Внутренний блок-try
   {
    f=checked((int)(f*i));
    Console.WriteLine("y({0})={1:f6}", i, 100 / (f - 1));
   }
   catch (DivideByZeroException)
   {
    Console.WriteLine("y({0})=Деление на 0", i);
   }
  }
 }
 catch (ArithmeticException)
 {
  Console.WriteLine("ERROR");
 }
}
Использование вложенных try-блоков обусловлено желанием обрабатывать различные категории ошибок различными способами. Одни типы ошибок носят катастрофический характер и не подлежат исправлению. Другие — неопасны для дальнейшего функционирования программы, и с ними можно справиться прямо на месте их возникновения. Поэтому внешний try-блок можно использовать для перехвата самых серьезных ошибок, позволяя внутренним try-блокам обрабатывать менее опасные.
Пример 2. Исключение, перехваченное одной catch-инструкцией, можно сгенерировать повторно, чтобы обеспечить возможность его перехвата другой (внешней) catch-инструкцией. Это позволяет нескольким обработчикам получить доступ к исключению. 
static void genException ()
{
 Console.WriteLine("a=");
 double a = double.Parse(Console.ReadLine());
 Console.WriteLine("b=");
 double b = double.Parse(Console.ReadLine());
 int f = 1;
 try //Внешний блок-try
 { 
  for (double i = a; i <= b; ++i)
  {
   try //Внутренний блок-try
   {
    f = checked((int)(f * i));
    Console.WriteLine("y({0})={1:f6}", i, 100 / (f - 1));
  }
  catch (DivideByZeroException)
  {
   Console.WriteLine("y({0})=Деление на 0", i);
   }
  }
 }
 catch (ArithmeticException)
 {
  Console.WriteLine("ERROR");
  throw ; //повторная генерация исключения
 }
}

static void Main()
{
 try
 {
  genException();
 }
 catch
 {
  Console.WriteLine("НЕИСПРАВИМАЯ ОШИБКА!!!");
 }
} 
Нужно помнить, что при повторном генерировании исключения оно не будет повторно перехватываться той же catch-инструкцией, а передается следующей (внешней) catch-инструкции.
Задания. 
1.	Объясните почему не было сгенерировано исключение DivideByZeroException. 
2.	Сгенерируйте собственное исключение DivideByZeroException и его обработку для ситуации f-1<0.000001. 
Пример 3. Как упоминалось выше, тип исключения должен совпадать с типом, заданным в catch-инструкции. В противном случае это исключение не будет перехвачено. Можно перехватывать все исключения, используя catch-инструкцию без параметров. Кроме того, с try-блоком можно связать не одну, а несколько catch-инструкций. В этом случае все catch-инструкции должны перехватывать исключения различного типа. Если вы все же не уверены, что предусмотрели все ситуации, то последней можно добавить catch-инструкцию без параметров.
Замечание. Иногда возникает потребность в обязательном выполнении каких-то действий, которые должны выполниться по выходу из try/catch-блока. Например, генерируется исключение и происходит преждевременное завершение выполнения программного фрагмента, но при этом остается открытым файл. Для выхода из такой ситуации С# предоставляет блок finally, который добавляется после всех блоков catch.
static void Main()
{
 for (int i = 0; i < 5; i++)
 {
  try
  {
   Console.WriteLine("Введите два числа");
   int a = int.Parse(Console.ReadLine());
   int b = int.Parse(Console.ReadLine());
   Console.WriteLine(a+"/"+b+"="+a/b);
  }
  catch (FormatException)
  {
   Console.WriteLine("Нужно ввести число!");
  }
  catch (DivideByZeroException)
  {
   Console.WriteLine("Делить на нуль нельзя!");
  }
  catch 
  {
   Console.WriteLine("Какая-то ошибка");
  }
  finally
  {
   Console.WriteLine("после try-блока");
  }
 }
}
Задание. Протестируйте данную программу, вводя поочередно следующие значения: 
a=4, b=2
a=3, b=g
a=d, b=1
a=2, b=0,
a=123456789987654321, b=1

Самостоятельная работа 
Вычисление конечных сумм и произведений
Решение многих задач связано с нахождением суммы или произведения элементов заданной последовательности. В данном разделе мы рассмотрим основные приемы вычисления конечных сумм и произведений.
Пусть  - произвольная последовательность n функций. Будем рассматривать конечную сумму вида  . Такую сумму можно записать более компактно, используя следующее обозначение:  . При  значение суммы равно 0.
В дальнейшем будем также использовать сокращенную запись для конечного произведения данной последовательности, которая выглядит следующим образом:  .
1.	Написать программу, которая подсчитывает сумму натуральных чисел от  до  ( ). 
Указания по решению задачи. Пусть  - сумма натуральных чисел от  до  . Тогда  Мы пришли к рекуррентному соотношению  , которым мы можем воспользоваться для подсчета суммы. Соотношение  говорит о том, что сумма на  -ном шаге равна сумме, полученной на предыдущем шаге, плюс очередное слагаемое. 
static void Main()
{
 Console.Write("Ввведите значение n: ");
 int n=int.Parse(Console.ReadLine());
 int s=0;
 for (int i=1; i<=n; ++i)
  s+=i;
 Console.WriteLine("s="+s);
}
2.	Написать программу, которая подсчитывает  для вещественного  и натурального  . 
Указание по решению задачи. Из свойства факториала  ,  ,  . Следовательно, факториал можно вычислять, используя рекуррентное соотношение  . 
static void Main()
{
 Console.Write("Ввведите значение n: ");
 int n=int.Parse(Console.ReadLine());
 int f=1;
 for (int i=1; i<=n; ++i)
 f*=i;
 Console.WriteLine("{0}!={1}", n, f);
}
3.	Написать программу для подсчета суммы  , где  - вещественное число,  - натуральное число. 
Указания по решению задачи. Если пронумеровать слагаемые, начиная с  , то мы увидим, что номер слагаемого совпадает со значением знаменателя. Рассмотрим каждый числитель отдельно:  Эту последовательность можно представить рекуррентным соотношением  (1). Теперь сумму можно представить следующим образом,  , а для нее справедливо рекуррентное соотношение  ,  (2). При составлении программы будем использовать формулы (1-2). 
static void Main()
{
 Console.Write("Ввведите значение n: ");
 int n=int.Parse(Console.ReadLine());
 Console.Write("Ввведите значение x: ");
 double x=double.Parse(Console.ReadLine());
 double b=0, s=0;
 for (int i=1; i<=n; ++i)
 {
  b+=Math.Cos(i*x);
  s+=b/i;
 }
 Console.WriteLine("s={0:f2}",s);
}
4.	Написать программу для подсчета суммы  , где  - вещественное число,  - натуральное число. 
Указания по решению задачи. Перейдем от сокращенной формы записи к развернутой, получим 
 
Каждое слагаемое формируется по формуле  . Если в эту формулу подставить  , то получим  . 
Чтобы не вводить несколько рекуррентных соотношений (отдельно для числителя, отдельно для знаменателя), представим общий член последовательности слагаемых с помощью рекуррентного соотношением вида  , где  для нас пока не известно. Найти его можно из выражения  . Произведя необходимые расчеты, получим, что  . Следовательно, для последовательности слагаемых мы получили рекуррентное соотношение  ,  (3). А всю сумму, по аналогии с предыдущими примерами, можно представить рекуррентным соотношением:  ,  (4). Таким образом, при составлении программы будем пользоваться формулами (3-4).
using System;

namespace Hello
{
 class Program
 {
  static void Main()
  {
   Console.Write("Ввведите значение n: ");
   int n=int.Parse(Console.ReadLine());
   Console.Write("Ввведите значение x: ");
   double x=double.Parse(Console.ReadLine());
   double a=-1, s=0;
   for (int i=1; i<=n; ++i)
   {
    a*=-x/i;  s+=a;
   }
   Console.WriteLine("s={0:f2}",s);
  }
 }
}
Вычисление бесконечных сумм
Будем теперь рассматривать бесконечную сумму вида  . Это выражение называется функциональным рядом. При различных значениях  из функционального ряда получаются различные числовые ряды  . Числовой ряд может быть сходящимся или расходящимся. Совокупность значений  , при которой функциональный ряд сходится, называется его областью сходимости.
Числовой ряд называется сходящимся, если сумма n первых его членов  при  имеет предел, в противном случае, ряд называется расходящимся. Ряд может сходиться лишь при условии, что общий член ряда  при неограниченном увеличении его номера стремится к нулю:  . Это необходимый признак сходимости для всякого ряда.
В случае бесконечной суммы будем вычислять ее с заданной точностью  Cчитается, что требуемая точность достигается, если вычислена сумма нескольких первых слагаемых и очередное слагаемое оказалось по модулю меньше чем е, то есть это слагаемое на результат практически не влияет. Тогда его и все последующие слагаемые можно не учитывать. 
Пример. Написать программу для подсчета суммы  с заданной точностью  ( ). 
Указание по решению задачи. Рассмотрим, что представляет из себя заданный ряд:  . Как видим, общий член ряда с увеличением значения i стремится к нулю. Поэтому данную сумму можно вычислить, но только с определенной точностью  . Заметим также, что последовательность слагаемых можно выразить с помощью рекуррентного соотношения  ,  , а всю сумму - с помощью рекуррентного соотношения  . (Данные рекуррентные соотношения выведите самостоятельно.)
using System;
namespace Hello
{
 class Program
 {
  static void Main()
  {
   Console.Write("Задайте точность вычислений е: ");
   double e=double.Parse(Console.ReadLine());
   double a=-1, s=0;
   for (int i=2; Math.Abs(a)>=e; ++i)
   {
    s+=a;
    a/=-i;
   }
   Console.WriteLine("s={0:f2}",s);
  }
 }
}

 
Лекция 8. Массивы
Массив - набор элементов одного и того же типа, объединенных общим именем. Массивы в С# можно использовать по аналогии с тем, как они используются в других языках программирования. Однако С#-массивы имеют существенные отличия: они относятся к ссылочным типам данных, более того - реализованы как объекты. Фактически имя массива является ссылкой на область кучи (динамической памяти), в которой последовательно размещается набор элементов определенного типа. Выделение памяти под элементы происходит на этапе инициализации массива. А за освобождением памяти следит система сборки мусора - неиспользуемые массивы автоматически утилизируются данной системой. 
Рассмотрим различные типы массивов.
8.1 Одномерные массивы
Одномерный массив - это фиксированное количество элементов одного и того же типа, объединенных общим именем, где каждый элемент имеет свой номер. Нумерация элементов массива в С# начинается с нуля, то есть, если массив состоит из 10 элементов, то его элементы будут иметь следующие номера: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9. 
Одномерный массив в С# реализуется как объект, поэтому его создание представляет собой двухступенчатый процесс. Сначала объявляется ссылочная переменная на массив, затем выделяется память под требуемое количество элементов базового типа, и ссылочной переменной присваивается адрес нулевого элемента в массиве. Базовый тип определяет тип данных каждого элемента массива. Количество элементов, которые будут храниться в массиве, определяется размер массива.
В общем случае процесс объявления переменной типа массив, и выделение необходимого объема памяти может быть разделено. Кроме того на этапе объявления массива можно произвести его инициализацию. Поэтому для объявления одномерного массива может использоваться одна из следующих форм записи:
Форма записи	Пояснения 
базовый_тип [] имя__массива;
Например: 
int [] a;  	Описана ссылка на одномерный массив, которая в дальнейшем может быть использована: 
1.	для адресации на уже существующий массив; 
2.	передачи массива в метод в качестве параметра 
3.	отсроченного выделения памяти под элементы массива. 
базовый_тип [] имя__массива = new базовый_тип [размер];
Например: 
int []a=new int [10];	Объявлен одномерный массив заданного типа и выделена память под одномерный массив указанной размерности. Адрес данной области памяти записан в ссылочную переменную. Элементы массива равны нулю. 
Замечание. Надо отметить, что в C# элементам массива присваиваются начальные значения по умолчанию в зависимости от базового типа. Для арифметических типов - нули, для ссылочных типов - null, для символов - пробел.
базовый_тип [] имя__массива={список инициализации};
Например: 
int []a={0, 1, 2, 3};	Выделена память под одномерный массив, размерность которого соответствует количеству элементов в списке инициализации. Адрес этой области памяти записан в ссылочную переменную. Значение элементов массива соответствует списку инициализации.
Обращения к элементам массива происходи с помощью индекса, для этого нужно указать имя массива и в квадратных скобках его номер. Например, a[0], b[10], c[i]. 
Так как массив представляет собой набор элементов, объединенных общим именем, то обработка массива обычно производится в цикле. Рассмотрим несколько простых примеров работы с одномерными массивами.
Пример 1.
static void Main()
{
  int[] myArray = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
  int i;
  for (i = 0; i < 10; ++i)
  Console.WriteLine(myArray[i]);
}
Задание. Измените программу так, чтобы числа выводились в строчку.
Пример 2.
static void Main()
{
  int[] myArray = new int[10];
  int i;
  for (i = 0; i < 10; i++)
  myArray[i] = i * i;
  for (i = 0; i < 10; i++)
  Console.WriteLine(myArray[i]);
}
Задание. Измените программу так, чтобы обрабатывался массив из n чисел.
Хотя при инициализации массива нет необходимости использовать операцию new, все же массив можно инициализировать следующим образом: 
int [ ] myArray = new int [ ] { 99, 10, 100, 18, 78, 23, 163, 9, 87, 49 };
Несмотря на избыточность, данная форма инициализации массива может оказаться полезной в том случае, когда уже существующей ссылке на одномерный массив присваивается ссылка на новый массив. Например:
static void Main()
{
  int[] myArray = { 0, 1, 2, 3, 4, 5};
  int i;
  for (i = 0; i < 10; i++)
  Console.Write(" "+myArray[i]);
  Console.WriteLine("\nНовый массив: ");
  myArray = new int[] { 99, 10, 100, 18, 78, 23, 163, 9, 87, 49 }; // 1
  for (i = 0; i < 10; i++)
  Console.Write(" " + myArray[i]);
}
Следует отметить, что первоначально переменная myArray ссылалась на 6-ти элементный массив. В строке 1 переменной myArray была присвоена ссылка на новый 10-элементный массив, в результате чего исходный массив оказался неиспользуемым, т.к. на него теперь не ссылается ни один объект. Поэтому он автоматически будет удален сборщиком мусора.
Массивы и исключения
Выход за границы массива в C# расценивается как ошибка, в ответ на которую генерируется исключение - IndexOutOfRangeException. 
Рассмотрим следующий пример:
static void Main()
{
  int[] myArray = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
  int i;
  try
  {
    for (i = 0; i <= 10; i++) Console.WriteLine(myArray[i]);
  }
  catch (IndexOutOfRangeException)
  {
    Console.WriteLine("Exception: Выход за границу диапазона");
  }
}
Задание. Добавьте в программу обработчики исключений FormatException и OutOfMemoryException. Вспомните, что они контролируют.
8.2 Массив как параметр
Так как имя массива фактически является ссылкой, то он передается в метод по ссылке и, следовательно, все изменения элементов массива, являющегося формальным параметром, отразятся на элементах соответствующего массива, являющимся фактическим параметром. 
Рассмотрим пример передачи массива как параметра:
class Program
{
  static void Print(int n, int[] a) //n - размерность массива, а - ссылка на массив
  {
    for (int i = 0; i < n; i++) Console.Write("{0} ", a[i]);
    Console.WriteLine();
  }

  static void Change(int n, int[] a)
  {
    for (int i = 0; i < n; i++)
    if (a[i] > 0) a[i] = 0; // изменяются элементы массива
  }

  static void Main()
  {
    int[] myArray = { 0, -1, -2, 3, 4, 5, -6, -7, 8, -9 };
    Print(10, myArray);
    Change(10, myArray);
    Print(10, myArray);
  }
}
Задание. Измените программу так, чтобы метод Change удваивал значения положительных элементов массива.
8.3 Массив как объект
Мы уже говорили о том, что массивы в С# реализованы как объекты. Если говорить более точно, то они реализованы на основе базового класса Array, определенного в пространстве имен System. Данный класс содержит различные свойства и методы. Например, свойство Length позволяет определять количество элементов в массиве. Преобразуем предыдущий пример:
class Program
{
  static void Print(int[] a) // передаем только ссылку на массив
  {
    for (int i = 0; i < a.Length; i++) Console.Write("{0} ", a[i]);
    Console.WriteLine();
  }

  static void Change(int[] a)
  {
    for (int i = 0; i < a.Length; i++)
    if (a[i] > 0) a[i] = 0;
  }

  static void Main()
  {
    int[] myArray = { 0, -1, -2, 3, 4, 5, -6, -7, 8, -9 };
    Print(myArray);
    Change(myArray);
    Print(myArray);
  }
}
Другие свойства и методы класса Array приведены в следующей таблице:
Элемент	Вид	Описание
Length	свойство	Количество элементов массива (по всем размерностям)
BinarySearch	статический метод 	Двоичный поиск в отсортированном массиве
Clear	статический метод	Присваивание элементам массива значений по умолчанию
Copy	статический метод	Копирование заданного диапазона элементов одного массива в другой
CopyTo	экземплярный метод	Копирование всех элементов текущего одномерного массива в другой массив
GetValue	экземплярный метод	Получение значения элемента массива
IndexOf	статический метод	Поиск первого вхождения элемента в одномерный массив
LastIndexOf	статический метод	Поиск последнего вхождения элемента в одномерный массив
Reverse	статический метод	Изменение порядка следования элементов на обратный
SetValue	экземплярный метод	Установка значения элемента массива
Sort	статический метод	Упорядочивание элементов одномерного массива
Вызов статических методов происходит через обращение к имени класса, например, Array.Sort(myArray). В данном случае мы обращаемся к статическому методу Sort класса Array и передаем данному методу в качестве параметра объект myArray - экземпляр класса Array.
Обращение к свойству или вызов экземплярного метода производится через обращение к экземпляру класса, например, myArray.Length или myArray.GetValue(i).
Пример:
class Program
{
  static void Main()
  {
    try
    {
      int[] MyArray;
      Console.Write("Введите размерность массива: ");
      int n = int.Parse(Console.ReadLine());
      MyArray = new int[n];
      for (int i = 0; i < MyArray.Length; ++i)
      {
        Console.Write("a[{0}]=",i);
        MyArray[i] = int.Parse(Console.ReadLine());
      }
      PrintArray("исходный массив:", MyArray);
      Array.Sort(MyArray);
      PrintArray("массив отсортирован по возрастанию", MyArray);
      Array.Reverse(MyArray);
      PrintArray("массив отсортирован по убыванию", MyArray);
    }
    catch (FormatException)
    {
      Console.WriteLine("неверный формат ввода данных");
    }
    catch (OverflowException)
    {
      Console.WriteLine("переполнение");
    }
    catch (OutOfMemoryException)
    {
      Console.WriteLine("недостаточно памяти для создания нового объекта");
    }
  }

  static void PrintArray(string a, int[] mas)
  {
    Console.WriteLine(a);
    for (int i = 0; i < mas.Length; i++) Console.Write("{0} ", mas[i]);
    Console.WriteLine();
  }
}
}
Задание. Добавьте в программу метод InputArray, предназначенный для ввода с клавиатуры элементов массива. Продемонстрируйте работу данного метода.
8.4 Многомерные массивы
Многомерные массивы имеют более одного измерения. Чаще всего используются двумерные массивы, которые представляют собой таблицы. Каждый элемент массива имеет два индекса, первый определяет номер строки, второй - номер столбца, на пересечении которых находится элемент. Нумерация строк и столбцов начинается с нуля. 
Объявить двумерный массив можно одним из предложенных способов:
тип [,] имя__массива;
тип [,] имя__массива = new тип [размер1, размер2];
тип [,] имя__массива={{элементы 1-ой строки}, … , {элементы n-ой строки}};
тип [,] имя__массива= new тип [,]{{элементы 1-ой строки}, … ,{элементы n-ой строки}};
строки}};
Например:
int [,] a; 
int [,] a= new int [3, 4];
int [,] a={{0, 1, 2}, {3, 4, 5}};
int [,] a= new int [,]{{0, 1, 2}, {3, 4, 5}};

Замечания. 
1.	Как и в случае с одномерными массивами, последние два описания являются избыточными. 
2.	При работе с многомерными массивами можно использовать приемы, которые мы рассмотрели для одномерных массивов. 
3.	При обращении к свойству Length для двумерного массива мы получим общее количество элементов в массиве. Чтобы получить количество строк нужно обратиться к методу GetLength с параметром 0. Чтобы получить количество столбцов - к методу GetLength с параметром 1. 
Пример:
class Program
  {
    static void PrintArray(string a, int[,] mas)
    {
      Console.WriteLine(a);
      for (int i = 0; i < mas.GetLength(0); i++)
      {
        for (int j = 0; j < mas.GetLength(1); j++)
          Console.Write("{0} ", mas[i, j]);
        Console.WriteLine();
      }
    }

    static void Change(int[,] mas)
    {
      for (int i = 0; i < mas.GetLength(0); i++)
        for (int j = 0; j < mas.GetLength(1); j++)
          if (mas[i, j] % 2 == 0) mas[i, j] = 0;              
    }

    static void Main()
    {
      try
      {
        int[,] MyArray ={ { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } };
        PrintArray("исходный массив:", MyArray);
        Change(MyArray);
        PrintArray("итоговый массив", MyArray);
      }
      catch (FormatException)
      {
            Console.WriteLine("неверный формат ввода данных");
      }
      catch (OverflowException)
      {
            Console.WriteLine("переполнение");
      }
      catch (OutOfMemoryException)
      {
            Console.WriteLine("недостаточно памяти для создания нового объекта");
      }
    }
  }
Задания. 
1.	Добавьте в программу метод InputArray, предназначенный для ввода с клавиатуры элементов массива. Продемонстрируйте работу данного метода. 
2.	Измените метод Change так, чтобы он вычислял сумму четных элементов двумерного массива. 
8.5 Ступенчатые массивы
В ступенчатых массивах количество элементов в разных строках может быть различным. В памяти ступенчатый массив хранится в виде массива массивов. Структура ступенчатого массива:
Массив	a		a[0]		a[0][0]	a[0][1]	…		
			a[1]						
			…		a[1][0]	a[1][1]	…		
			a[n]						
					a[n][0]	a[n][1]	…		
Объявление ступенчатого массива:
тип [][] имя_массива;
Например:
int [][]a;
Фактически мы объявили одномерный массив ссылок на целочисленные одномерные массивы. При таком описании потребуется не только выделять память под одномерный массив ссылок, но и под каждый из целочисленных одномерных массивов. Такое распределение памяти позволяет определять произвольную длину каждой строки массива (отсюда и произошло название массива - ступенчатый). Например:
int [][] a= new int [3][];  // Создаем три строки
a[0]=new int [2];  // 0-ая строка ссылается на 2-х элементый одномерный массив 
a[1]=new int [3];  // 1-ая строка ссылается на 3-х элементый одномерный массив
a[2]=new int [10];  // 2-ая строка ссылается на 10-х элементый одномерный массив
Другой способ выделения памяти:
int [][] a= {new int [2], new int [3], new int [10]};
Так как каждая строка ступенчатого массива фактически является одномерным массивом, то с каждой строкой можно работать как с экземпляром класса Array. Это является преимуществом ступенчатых массивов перед двумерными массивами.
Пример:
class Program
{
  static void Main()
  {
    try
    {
      int[][] MyArray;
      Console.Write("Ввведите количесвто строк: ");
      int n = int.Parse(Console.ReadLine());
      MyArray = new int[n][];
      for (int i = 0; i < MyArray.Length; i++)
      {
        Console.Write("введите количество элементов в {0} строке: ", i);
        int j = int.Parse(Console.ReadLine());
        MyArray[i] = new int[j];
        for (j = 0; j < MyArray[i].Length; j++)
        {
          Console.Write("a[{0}][{1}]= ", i, j);
          MyArray[i][j] = int.Parse(Console.ReadLine());
        }
      }
      PrintArray("исходный массив:", MyArray);
      for (int i = 0; i < MyArray.Length; i++) Array.Sort(MyArray[i]);
      PrintArray("измененный массив", MyArray);
    }
    catch (FormatException)
    {
      Console.WriteLine("неверный формат ввода данных");
    }
    catch (OverflowException)
    {
      Console.WriteLine("переполнение");
    }
    catch (OutOfMemoryException)
    {
      Console.WriteLine("недостаточно памяти для создания нового объекта");
    }
  }

  static void PrintArray(string a, int[][] mas)
  {
    Console.WriteLine(a);
    for (int i = 0; i < mas.Length; i++)
    {
      for (int j = 0; j < mas[i].Length; j++) Console.Write("{0} ", mas[i][j]);
      Console.WriteLine();
    }
  }
}
Задание. Добавьте в программу метод MakeArray, предназначенный для создания ступенчатого массива, в котором количество элементов в каждой строке больше номера строки в два раза. А сам элемент равен сумме номеров строки и столбца, в котором он находится. Продемонстрируйте работу данного метода.
8.6 Оператор foreach и его использование при работе с массивами 
Оператор foreach применяется для перебора элементов в специальным образом организованной группе данных, в том числе и в массиве. Удобство этого вида цикла заключается в том, что нам не требуется определять количество элементов в группе и выполнять перебор по индексу - мы просто указываем на необходимость перебрать все элементы группы. Синтаксис оператора: 
foreach (<тип> <имя> in <группа>) <тело цикла>
где имя определяет локальную по отношению к циклу переменную, которая будет по очереди принимать все значения из указанной группы, а тип соответствует базовому типу элементов группы.
Ограничением оператора foreach является то, что с его помощью можно только просматривать значения элементов в группе данных, но нельзя их изменять.
Рассмотрим несколько примеров использования оператора foreach:
1.	для работы с одномерными массивами: 
2.	static void PrintArray(string a, int [] mas)
3.	{
4.	  Console.WriteLine(a);
5.	  foreach (int x in mas)Console.Write("{0} ", x);
6.	  Console.WriteLine();
7.	}
8.	для работы с двумерными массивами: 
9.	static int Sum (int [,] mas)
10.	{
11.	  int s=0;
12.	  foreach (int x in mas) s += x;
13.	  return s;
14.	}
15.	для работы со ступенчатыми массивами: 
16.	static void PrintArray3(string a, int[][] mas)
17.	{
18.	  Console.WriteLine(a);
19.	  for (int i = 0; i < mas.Length; i++)
20.	  {
21.	    foreach (int x in mas[i]) Console.Write("{0} ", x);
22.	    Console.WriteLine();
23.	  }
24.	}
Примеры
1.	Дана последовательность целых чисел. Заменить все положительные элементы противоположными им числами. 
Пример 1: для одномерного массива
using System;
namespace ConsoleApplication2
{
  class Class
  {
    static int [] Input ()
    {
      Console.WriteLine("введите размерность массива");
      int n=int.Parse(Console.ReadLine());
      int []a=new int[n];
      for (int i = 0; i < n; ++i) 
      {
        Console.Write("a[{0}]= ", i);
        a[i]=int.Parse(Console.ReadLine());
      }
      return a;
    }

    static void Print(int[] a) 
    {
      for (int i = 0; i < a.Length; ++i) Console.Write("{0} ", a[i]);
      Console.WriteLine();
    }

    static void Change(int[] a)
    {
      for (int i = 0; i < a.Length; ++i)
        if (a[i] > 0) a[i] = -a[i];
    }

    static void Main()
    {
      int[] myArray=Input();
Console.WriteLine("Исходный массив:");
      Print(myArray);
      Change(myArray);
Console.WriteLine("Измененный массив:");
      Print(myArray);
    }
  }
}
Пример 2: для двумерного массива
using System;
namespace ConsoleApplication
{
  class Class
  {
    static int [,] Input (out int n, out int m)
    {
      Console.WriteLine("введите размерность массива");
      Console.Write("n = ");
      n=int.Parse(Console.ReadLine());
      Console.Write("m = ");
      m=int.Parse(Console.ReadLine());
      int [,]a=new int[n, m];
      for (int i = 0; i < n; ++i) 
        for (int j = 0; j < m; ++j)
        {
          Console.Write("a[{0},{1}]= ", i, j);
          a[i, j]=int.Parse(Console.ReadLine());
        }
      return a;
    }

    static void Print(int[,] a) 
    {
      for (int i = 0; i < a.GetLength(0); ++i,Console.WriteLine() )
        for (int j = 0; j < a.GetLength(1); ++j)
          Console.Write("{0,5} ", a[i, j]);
    }

    static void Change(int[,] a)
    {
      for (int i = 0; i < a.GetLength(0); ++i)
        for (int j = 0; j < a.GetLength(1); ++j)
          if (a[i, j] > 0) a[i, j] = -a[i, j];
    }

    static void Main()
    {
      int n,m;
      int[,] myArray=Input(out n, out m);
      Console.WriteLine("Исходный массив:");
      Print(myArray);
      Change(myArray);
      Console.WriteLine("Измененный массив:");
      Print(myArray);
    }
  }
}
2.	Дана последовательность из n действительных чисел. Подсчитать количество максимальных элементов. 
using System;
namespace ConsoleApplication
{
  class Class
  {
    static int [] Input ()
    {
      Console.WriteLine("введите размерность массива");
      int n=int.Parse(Console.ReadLine());
      int []a=new int[n];
      for (int i = 0; i < n; ++i) 
      {
        Console.Write("a[{0}]= ", i);
        a[i]=int.Parse(Console.ReadLine());
      }
      return a;
    }

    static int Max(int[] a)
    {
      int max=a[0];
      for (int i = 1; i < a.Length; ++i)
        if (a[i] > max) max=a[i];
      return max;
    }

    static void Main()
    {
      int[] myArray=Input();
      int max=Max(myArray);
      int kol=0;
      for (int i=0; i<myArray.Length;++i)
        if (myArray[i]==max)++kol;
      Console.WriteLine("Количество максимальных элементов = "+kol);
    }
  }
}
3.	Дан массив размером n?n, элементы которого целые числа. Подсчитать среднее арифметическое нечетных элементов, расположенных выше главной диагонали. 
using System;
namespace ConsoleApplication
{
  class Class
  {
    static int [,] Input (out int n)
    {
      Console.WriteLine("введите размерность массива");
      Console.Write("n = ");
      n=int.Parse(Console.ReadLine());
      int [,]a=new int[n, n];
      for (int i = 0; i < n; ++i) 
        for (int j = 0; j < n; ++j)
        {
          Console.Write("a[{0},{1}]= ", i, j);
          a[i, j]=int.Parse(Console.ReadLine());
        }
      return a;
    }

    static void Print(int[,] a) 
    {
      for (int i = 0; i < a.GetLength(0); ++i,Console.WriteLine() )
        for (int j = 0; j < a.GetLength(1); ++j)
          Console.Write("{0,5} ", a[i, j]);
    }

    static double Rezalt(int[,] a)
    {
      int k=0;
      double s=0;
      for (int i = 0; i < a.GetLength(0); ++i)
        for (int j = i+1; j < a.GetLength(1); ++j)
          if (a[i, j] %2!= 0) {++k; s+=a[i, j];}
      if (k!=0) return s/k;
      else return 0;
    }

    static void Main()
    {
      int n;
      int[,] myArray=Input(out n);
      Console.WriteLine("Исходный массив:");
      Print(myArray);
      double rez=Rezalt(myArray);
      Console.WriteLine("Среднее арифметическое ={0:f2}", rez);
    }
  }
}
4.	Дан массив размером n?n, элементы которого целые числа. Для хранения массив n?n использовать ступенчатый массив.Найти максимальный элемент в каждой строке и записать данные в новый массив. 
using System;
namespace ConsoleApplication
{
  class Class
  {
    static int [][] Input ()
    {
      Console.WriteLine("введите размерность массива");
      Console.Write("n = ");
      int n=int.Parse(Console.ReadLine());
      int [][]a=new int[n][];
      for (int i = 0; i < n; ++i)
      {
        a[i]=new int [n];
        for (int j = 0; j < n; ++j)
        {
          Console.Write("a[{0},{1}]= ", i, j);
          a[i][j]=int.Parse(Console.ReadLine());
        }
      }
      return a;
    }

    static void Print1(int[] a) 
    {
      for (int i = 0; i < a.Length; ++i)
        Console.Write("{0,5} ", a[i]);
    }

    static void Print2(int[][] a) 
    {
      for (int i = 0; i < a.Length; ++i,Console.WriteLine() )
        for (int j = 0; j < a[i].Length; ++j)
          Console.Write("{0,5} ", a[i][j]);
    }

    static int Max(int[] a)
    {
      int max=a[0];
      for (int i = 1; i < a.Length; ++i)
        
        if (a[i] >max) {max=a[i];}
      return max;
    }

    static void Main()
    {
      int[][] myArray=Input();
      Console.WriteLine("Исходный массив:");
      Print2(myArray);
      int[]rez=new int [myArray.Length];
      for (int i=0;i<myArray.Length; ++i)
        rez[i]=Max(myArray[i]);
      Console.WriteLine("Новый массив:");
      Print1(rez);
    }
  }
}
Самостоятельная работа
Вставка и удаление элементов в массивах
При объявлении массива мы определяем его максимальную размерность, которая в дальнейшем изменена быть не может. Однако с помощью вспомогательной переменной можно контролировать текущее количество элементов, которое не может быть больше максимального. 
Замечание. В пространстве имен System.Collection реализована коллекция ArrayList - массив, динамически изменяющий свой размер. Мы будем рассматривать его позже.
Пример. Рассмотрим фрагмент программы:
int []a=new int [10];
int n=5;
for (int i=0; i<5;i++) a[i]:=i*i;

В этом случае массив можно представить следующим образом:
n=5	0	1	2	3	4	5	6	7	8	9
а 	0	1	4	9	16	0 	0	0	0	0
Так как во время описания был определен массив из 10 элементов, а заполнено только первые 5, то оставшиеся элементы будут заполнены нулями.
Что значит удалить из одномерного массива элемент с номером 3? Удаление должно привести к физическому "уничтожению" элемента с номером 3 из массива, при этом общее количество элементов должно быть уменьшено. В этом понимании удаления элемента итоговый массив должен выглядеть следующем образом
	0	1	2	4	5	6	7	8	9	недопустимое состояние
а 	0	1	4	16	0	0	0	0	0	
Такое удаление для массивов невозможно, поскольку элементы массива располагаются в памяти последовательно друг за другом, что позволяет организовать индексный способ обращения к массиву. 
Однако "удаление" можно смоделировать сдвигом элементов влево и уменьшением значения переменной, которая отвечает за текущее количество элементов в массиве, на единицу:
n=4	0	1	2	3	4	5	6	7	8	9
а 	0	1	4	16	0	0	0	0	0	0
В общем случае, если мы хотим удалить элемент массива с номером k (всего в массиве n элементов, а последний элемент имеет индекс n-1), то нам необходимо произвести сдвиг элементов, начиная с k+1-го на одну позицию влево. Т.е. на k-ое место поставить k+1-й элемент, на место k+1 - k+2-й элемент, …, на место n-2 - n-1-й элемент. После чего значение n уменьшить на 1. В этом случае размерность массива не изменится, изменится лишь текущее количество элементов, и у нас создастся ощущение, что элемент с номером k удален. Рассмотрим данный алгоритм на примере:
using System;
namespace ConsoleApplication
{
  class Class
  {
    static int [] Input ()
    {
      Console.WriteLine("введите размерность массива");
      int n=int.Parse(Console.ReadLine());
      int []a=new int[n];
      for (int i = 0; i < n; ++i) 
      {
        Console.Write("a[{0}]= ", i);
        a[i]=int.Parse(Console.ReadLine());
      }
      return a;
    }

    static void Print(int[] a, int n) 
    {
      for (int i = 0; i < n; ++i) Console.Write("{0} ", a[i]);
      Console.WriteLine();
    }

    static void DeleteArray(int[] a, ref int n, int m)
    {
      for (int i = m; i < n-1; ++i)
        a[i] = a[i+1];
      --n;
    }

    static void Main()
    {
      int[] myArray=Input();
      int n=myArray.Length;
      Console.WriteLine("Исходный массив:");
      Print(myArray, n);
      Console.WriteLine("Введите номер элемента для удаления:");
      int m=int.Parse(Console.ReadLine());
DeleteArray(myArray, ref n,m);
      Console.WriteLine("Измененный массив:");
      Print(myArray, n);
    }
  }
}
Задание. Подумайте, какие исключительные ситуации могут возникнуть в данной программе и добавьте в нее соответствующие обработки исключительных ситуаций
Рассмотрим теперь операцию удаления в двумерном массиве. Размерность двумерного массива также зафиксирована на этапе объявления массива. Однако при необходимости можно "смоделировать" удаление целой строки в массиве, выполняя сдвиг всех строк, начиная с k-той на единицу вверх. В этом случае размерность массива не изменится, а текущее количество строк будет уменьшено на единицу. В качестве примера удалим из двумерного массива, строку с номером k.
using System;
namespace ConsoleApplication
{
  class Class
  {
    static int [,] Input (out int n, out int m)
    {
      Console.WriteLine("введите размерность массива");
      Console.Write("n = ");
      n=int.Parse(Console.ReadLine());
      Console.Write("m = ");
      m=int.Parse(Console.ReadLine());
      int [,]a=new int[n, m];
      for (int i = 0; i < n; ++i) 
        for (int j = 0; j < m; ++j)
        {
          Console.Write("a[{0},{1}]= ", i, j);
          a[i, j]=int.Parse(Console.ReadLine());
        }
      return a;
    }

    static void Print(int[,] a, int n, int m) 
    {
      for (int i = 0; i < n; ++i,Console.WriteLine() )
        for (int j = 0; j < m; ++j)
          Console.Write("{0,5} ", a[i, j]);
    }

    static void DeleteArray(int[,] a, ref int n, int m, int k)
    {
      for (int i = k; i < n-1; ++i)
        for (int j = 0; j < m; ++j)
          a[i, j] = a[i+1, j];
      --n;
    }

    static void Main()
    {
      int n,m;
      int[,] myArray=Input(out n, out m);
      Console.WriteLine("Исходный массив:");
      Print(myArray, n, m);
      Console.WriteLine("Введите номер строки для удаления:");
      int k=int.Parse(Console.ReadLine());
      DeleteArray(myArray, ref n, m, k);
      Console.WriteLine("Измененный массив:");
      Print(myArray, n, m);
    }
  }
Задания. 
1.	Подумайте, какие исключительные ситуации могут возникнуть в данной программе и добавьте в нее соответствующие обработки исключительных ситуаций. 
2.	Измените программу так, чтобы она удаляла k-тый столбец в двумерном массиве. 
Рассмотрим модификацию предыдущей программы, для случая, когда используется ступенчатый массив.
using System;
namespace ConsoleApplication
{
  class Class
  {
    
    static int [][] Input (out int n, out int m)
    {
      Console.WriteLine("введите размерность массива");
      Console.Write("n = ");
      n=int.Parse(Console.ReadLine());
      Console.Write("m = ");
      m=int.Parse(Console.ReadLine());
      int [] []a=new int[n][];
      for (int i = 0; i < n; ++i)
      {
        a[i]=new int[m];
        for (int j = 0; j < m; ++j)
        {
          Console.Write("a[{0},{1}]= ", i, j);
          a[i][j]=int.Parse(Console.ReadLine());
        }
      }
      return a;
    }

    static void Print(int[][] a, int n, int m) 
    {
      for (int i = 0; i < n; ++i,Console.WriteLine() )
        for (int j = 0; j < m; ++j)
          Console.Write("{0,5} ", a[i] [j]);
    }

    static void DeleteArray(int[][] a, ref int n, int k)
    {
      for (int i = k; i < n-1; ++i)//производим сдвиг ссылок
        a[i] = a[i+1];
      --n;
    }

    static void Main()
    {
      int n,m;
      int[][] myArray=Input(out n, out m);
      Console.WriteLine("Исходный массив:");
      Print(myArray, n, m);
      Console.WriteLine("Введите номер строки для удаления:");
      int k=int.Parse(Console.ReadLine());
      DeleteArray(myArray, ref n, k);
      Console.WriteLine("Измененный массив:");
      Print(myArray, n, m);
    }
  }
}

Вернемся к массиву, определенному в самом первом примере. И подумаем теперь, что значит добавить элемент в одномерный массив в позицию с номером k? В этом случае все элементы, начиная с k-ого, должны быть сдвинуты вправо на одну позицию. Однако сдвиг нужно начинать с конца, т.е. на первом шаге на n-е место поставить n-1-ый элемент, потом на n-1-ое место поставить n-2-й элемент, …, наконец, на k+1 место вставить k-й элемент. Таким образом, копия k-го элемента будет на k+1-м месте и на k-е место можно поставить новый элемент. Затем необходимо увеличить текущее количество элементов на 1. 
Рассмотрим массив из примера 1 и в качестве k зададим значение равное 3. В этом случае массив будет выглядеть следующим образом: 
k=3	0	1	2	3	4	5	6	7	8	9
а 	0	1	4	9	9	16	0	0	0	0
Теперь в позицию с номером 3 можно поместить новое значение. А текущее количество элементов в массиве становится равным 6. Подумайте, почему сдвиг нужно выполнять с конца массива, а не с начала, как мы это делали в случае удаления элемента из массива.
Рассмотрим программную реализацию данного алгоритма:
using System;
namespace ConsoleApplication
{
  class Class
  {
    static int [] Input (out int n)
    {
      Console.WriteLine("введите размерность массива");
      n=int.Parse(Console.ReadLine());
      int []a=new int[2*n]; //выделяем памяти больше чем требуется
      for (int i = 0; i < n; ++i) 
      {
        Console.Write("a[{0}]= ", i);
        a[i]=int.Parse(Console.ReadLine());
      }
      return a;
    }

    static void Print(int[] a, int n) 
    {
      for (int i = 0; i < n; ++i) Console.Write("{0} ", a[i]);
      Console.WriteLine();
    }

    static void AddArray(int[] a, ref int n, int m)
    {
      for (int i = n; i >= m; --i)
        a[i] = a[i-1];
      ++n;
      Console.WriteLine("Введите значение нового элемента");
      a[m]=int.Parse(Console.ReadLine());
    }

    static void Main()
    {
      int n;
      int[] myArray=Input(out n);
      Console.WriteLine("Исходный массив:");
      Print(myArray, n);
      Console.WriteLine("Введите номер элемента для вставки:");
      int m=int.Parse(Console.ReadLine());
      AddArray(myArray, ref n,m);
      Console.WriteLine("Измененный массив:");
      Print(myArray, n);
    }
  }
}
Теперь рассмотрим добавление строки в двумерный массив. Для этого все строки после строки с номером k передвигаем на 1 строку вниз. Затем увеличиваем количество строк на 1. После этого копия строки с номером k будет находиться в столбце с номером k+1. И, следовательно, k-тый столбец можно заполнить новыми значениями. Рассмотрим программную реализацию алгоритма:
using System;
namespace ConsoleApplication
{
  class Class
  {
    
    static int [,] Input (out int n, out int m)
    {
      Console.WriteLine("введите размерность массива");
      Console.Write("n = ");
      n=int.Parse(Console.ReadLine());
      Console.Write("m = ");
      m=int.Parse(Console.ReadLine());
//выделяем памяти больше чем необходимо
      int [,]a=new int[2*n, m]; 
      for (int i = 0; i < n; ++i) 
        for (int j = 0; j < m; ++j)
        {
          Console.Write("a[{0},{1}]= ", i, j);
          a[i, j]=int.Parse(Console.ReadLine());
        }
      return a;
    }


    static void Print(int[,] a, int n, int m) 
    {
      for (int i = 0; i < n; ++i,Console.WriteLine() )
        for (int j = 0; j < m; ++j)
          Console.Write("{0,5} ", a[i, j]);
    }

    static void AddArray(int[,] a, ref int n, int m, int k)
    {
      for (int i = n; i >=k; --i)
        for (int j = 0; j < m; ++j)
          a[i+1, j] = a[i, j];
      ++n;
      Console.WriteLine("Введите элементы новой строки");
      for (int j=0; j<m;++j)
      {
        Console.Write("a[{0},{1}]=", k, j);
        a[k, j]=int.Parse(Console.ReadLine());
      }
    }

    static void Main()
    {
      int n,m;
      int[,] myArray=Input(out n, out m);
      Console.WriteLine("Исходный массив:");
      Print(myArray, n, m);
      Console.WriteLine("Введите номер строки для добавления:");
      int k=int.Parse(Console.ReadLine());
      AddArray(myArray, ref n, m, k);
      Console.WriteLine("Измененный массив:");
      Print(myArray, n, m);
    }
  }
}
Задания. 
1.	Подумайте, какие исключительные ситуации могут возникнуть в данной программе и добавьте в нее соответствующие обработки исключительных ситуаций. 
2.	Измените программу так, чтобы она добавляла k-тый столбец в двумерном массиве. 
Рассмотрим модификацию предыдущей программы для случая, когда используется ступенчатый массив. 
using System;
namespace ConsoleApplication
{
  class Class
  {
    
    static int [][] Input (out int n, out int m)
    {
      Console.WriteLine("введите размерность массива");
      Console.Write("n = ");
      n=int.Parse(Console.ReadLine());
      Console.Write("m = ");
      m=int.Parse(Console.ReadLine());
//выделяем памяти больше чем неообходимо
      int [][]a=new int[2*n][]; 
      for (int i = 0; i < n; ++i)
      {
        a[i]=new int [m];
        for (int j = 0; j < m; ++j)
        {
          Console.Write("a[{0}][{1}]= ", i, j);
          a[i][j]=int.Parse(Console.ReadLine());
        }
      }
      return a;
    }

    static void Print(int[][] a, int n, int m) 
    {
      for (int i = 0; i < n; ++i,Console.WriteLine() )
        for (int j = 0; j < m; ++j)
          Console.Write("{0,5} ", a[i][j]);
    }

    static void AddArray(int[][] a, ref int n, int m, int k)
    {
      for (int i = n; i >=k; --i)//выполняем сдвиг ссылок
        a[i+1] = a[i];
      ++n;
      a[k]=new int[m]; //создаем новую строку
      Console.WriteLine("Введите элементы новой строки");
      for (int j=0; j<m;++j)
      {
        Console.Write("a[{0}][{1}]=", k, j);
        a[k][j]=int.Parse(Console.ReadLine());
      }
    }

    static void Main()
    {
      int n,m;
      int[][] myArray=Input(out n, out m);
      Console.WriteLine("Исходный массив:");
      Print(myArray, n, m);
      Console.WriteLine("Введите номер строки для добавления:");
      int k=int.Parse(Console.ReadLine());
      AddArray(myArray, ref n, m, k);
      Console.WriteLine("Измененный массив:");
      Print(myArray, n, m);
    }
  }
}

Практические задания
1.	В одномерном массиве, элементы которого - целые числа, произвести следующие действия: 
1.	Удалить из массива все четные числа. 
2.	Вставить новый элемент после всех элементов, которые заканчиваются на данную цифру. 
3.	Удалить из массива повторяющиеся элементы, оставив только их первые вхождения. 
4.	Вставить новый элемент между всеми парами элементов, имеющими разные знаки. 
5.	Уплотнить массив, удалив из него все нулевые значения. 
2.	В двумерном массиве, элементы которого - целые числа, произвести следующие действия: 
1.	Вставить новую строку после строки, в которой находится первый встреченный минимальный элемент. 
2.	Вставить новый столбец перед всеми столбцами, в которых встречается заданное число. 
3.	Удалить все строки, в которых нет ни одного четного элемента. 
4.	Удалить все столбцы, в которых все элементы положительны. 
5.	Удалить из массива k-тую строку и j-тый столбец, если их значения совпадают. 
6.	Уплотнить массив, удалив из него все нулевые строки и столбцы
 
Лекция 9. Символы и строки
Обработка текстовой информации является одной из самых распространенных задач современного программировании. С# предоставляет для ее решения широкий набор средств: символы char, неизменяемые строки string, изменяемые строки StringBuider и регулярные выражения Regex. В данном разделе мы рассмотрим работу с символами, неизменяемыми и изменяемыми строками.
9.1 Символы char
Символьный тип char предназначен для хранения символа в кодировке Unicode. Символьный тип относится к встроенным типам данных С# и соответствует стандартному классу Сhar библиотеки .Net из пространства имен System. В этом классе определены статические методы, позволяющие задавать вид и категорию символа, а также преобразовывать символ в верхний или нижний регистр, в число. Рассмотрим основные методы:
Метод	Описание 
GetNumericValue	Возвращает числовое значение символа, если он является цифрой, и -1 в противном случае.
GetUnicodeCategory	Возвращает категорию Unicode-символа. В Unicode символы разделены на категории, например цифры (DecimalDigitNumber), римские цифры (LetterNumber), разделители строк (LineSeparator), буквы в нижнем регистре (LowercaseLetter) и т.д. 
IsControl	Возвращает true, если символ является управляющим.
IsDigit	Возвращает true, если символ является десятичной цифрой.
IsLetter	Возвращает true, если символ является буквой.
IsLetterOrDigit	Возвращает true, если символ является буквой или десятичной цифрой.
IsLower	Возвращает true, если символ задан в нижнем регистре.
IsNumber	Возвращает true, если символ является числом (десятичным или шестнадцатеричным).
IsPunctuation	Возвращает true, если символ является знаком препинания.
IsSeparator	Возвращает true, если символ является разделителем.
IsUpper	Возвращает true, если символ задан в верхнем регистре.
IsWhiteSpace	Возвращает true, если символ является пробельным (пробел, перевод строки, возврат каретки).
Parse	Преобразует строку в символ (строка должна состоять из одного символа).
ToLower	Преобразует символ в нижний регистр
ToUpper	Преобразует символ в верхний регистр
В следующем примере рассмотрим применение данных методов:
static void Main()
{
 try
 {
  char b = 'B', c = '\x64', d = '\uffff';
  Console.WriteLine("{0}, {1}, {2}", b, c, d);
  Console.WriteLine("{0}, {1}, {2}", char.ToLower(b), char.ToUpper(c), char.GetNumericValue(d));
  char a;
  do	//цикл выполнятеся до тех пор, пока не ввели символ e
  {
   Console.WriteLine("Введите символ: ");
   a = char.Parse(Console.ReadLine());
   Console.WriteLine("Введен символ {0}, его код  {1}, его категория {2}", a,       
                      (int)a, char.GetUnicodeCategory(a));
   if (char.IsLetter(a)) Console.WriteLine("Буква");
   if (char.IsUpper(a)) Console.WriteLine("Верхний регистр");
   if (char.IsLower(a)) Console.WriteLine("Нижний регистр");
   if (char.IsControl(a)) Console.WriteLine("Управляющий символ");
   if (char.IsNumber(a)) Console.WriteLine("Число");
   if (char.IsPunctuation(a)) Console.WriteLine("Разделитель");
  } while (a != 'e');
 }
 catch
 {
  Console.WriteLine("Возникло исключение");
 }
}
Используя символьный тип можно оргранизовать массив символов и работать с ним на основе базового класса Array:
static void Main()
{
 char[] a ={ 'm', 'a', 'Х',  'i', 'M', 'u', 'S' , '!', '!', '!' };
 char [] b="кол около колокола".ToCharArray(); //преобразование строки в массив символов
 PrintArray("Исходный массив а:", a);
 for (int x=0;x<a.Length; x++)
 if (char.IsLower(a[x])) a[x]=char.ToUpper(a[x]);
 PrintArray("Измененный массив а:", a);
 PrintArray("Исходный массив b:", b);
 Array.Reverse(b);
 PrintArray("Измененный массив b:", b);
}

static void PrintArray(string line, Array a)
{
 Console.WriteLine(line);
 foreach( object x in a) Console.Write(x);
 Console.WriteLine('\n');
}
Задание. Измените программу так, чтобы в ней подсчитывалось количество знаков пунктуации в массиве a.
9.2 Неизменяемые строки string
Тип string, предназначенный для работы со строками символов в кодировке Unicode, является встроенным типом С#. Ему соответствует базовый тип класса System.String библиотеки .Net. Каждый объект string - это неизменяемая последовательность символов Unicode, т.е. методы, предназначенные для изменения строк, возвращают измененные копии, исходные же строки остаются неизменными.
Создать строку можно несколькими способами:
1.	string s; 	// инициализация отложена
2.	string s=''кол около колокола''; 	//инициализация строковым литералом
3.	string s=@'Привет!'	//символ @ сообщает конструктору string, что строку 
4.	Сегодня хорошая погода!!! '' // нужно воспринимать буквально, даже если она занимает 
5.	//несколько строк
6.	
7.	string s=new string (' ', 20); 	//конструктор создает строку из 20 пробелов 
8.	int x = 12344556;			//инициализировали целочисленную переменную
9.	string s = x.ToString();		//преобразовали ее к типу string
10.	
11.	char [] a={'a', 'b', 'c', 'd', 'e'};	//создали массив символов
12.	string v=new string (a);		// создание строки из массива символов
13.	
14.	char [] a={'a', 'b', 'c', 'd', 'e'};
15.	// создание строки из части массива символов, при этом:  0 
16.	string v=new string (a, 0, 2)	
17.	// показывает с какого символа, 2 - сколько символов 
18.	// использовать для инициализации
19.	
20.	
Класс string обладает богатым набором методов для сравнения строк, поиска в строке и других действий со строками. Рассмотрим эти методы.
Название	Вид	Описание
Compare	Статический метод	Сравнение двух строк в лексикографическом (алфавитном) порядке. Разные реализации метода позволяют сравнивать строки с учетом или без учета регистра.
CompareTo	Метод	Сравнение текущего экземпляра строки с другой строкой.
Concat	Статический метод	Слияние произвольного числа строк.
Copy	Статический метод	Создание копии строки
Empty	Статическое поле	Открытое статическое поле, представляющее пустую строку
Format	Статический метод	Форматирование строки в соответствии с заданным форматом
IndexOf, IndexOfAny, LastIndexOf, LastIndexOfAny	Экземплярные методы	Определение индексов первого и последнего вхождения заданной подстроки или любого символа из заданного набора в данную строку.
Insert	Экземплярный метод	Вставка подстроки в заданную позицию
Join	Статический метод	Слияние массива строк в единую строку. Между элементами массива вставляются разделители.
Length	Свойство 	Возвращает длину строки
PadLeft, PadRigth	Экземплярные методы	Выравнивают строки по левому или правому краю путем вставки нужного числа пробелов в начале или в конце строки.
Remove	Экземплярный метод	Удаление подстроки из заданной позиции
Replace	Экземплярный метод	Замена всех вхождений заданной подстроки или символа новыми подстрокой или символом.
Split	Экземплярный метод	Разделяет строку на элементы, используя разные разделители. Результаты помещаются в массив строк.
StartWith, EndWith	Экземплярные методы	Возвращают true или false в зависимости от того, начинается или заканчивается строка заданной подстрокой.
Substring	Экземплярный метод	Выделение подстроки, начиная с заданной позиции
ToCharArray	Экземплярный метод	Преобразует строку в массив символов
ToLower, ToUpper	Экземплярные методы	Преобразование строки к нижнему или верхнему регистру
Trim, TrimStart, TrimEnd	Экземплярные методы	Удаление пробелов в начале и конце строки или только с одного ее конца.
Напоминаем, что вызов статических методов происходит через обращение к имени класса, например, String.Concat(str1, str2), в остальных случаях через обращение к экземплярам класса, например, str.ToLower(). На примере рассмотрим использование данных свойств и методов.
static void Main()
{
 string str1 ="Первая строка";
 string str2 = string.Copy(str1);
 string str3 = "Вторая строка";
 string str4 = "ВТОРАЯ строка";
 string strUp, strLow;
 int result, idx;
 Console.WriteLine("str1: " + str1);
 Console.WriteLine("Длина строки str1: " +str1.Length);
 
 // Создаем прописную и строчную версии строки str1.
 strLow = str1.ToLower();
 strUp = str1.ToUpper();
 Console.WriteLine("Строчная версия строки str1: " +strLow);
 Console.WriteLine("Прописная версия строки str1: " +strUp);
 Console.WriteLine();
 
 // Сравниваем строки,
 result = str1.CompareTo(str3);
 if (result == 0) Console.WriteLine("str1 и str3 равны.");
 else if (result < 0) Console.WriteLine("str1 меньше, чем str3");
 else Console.WriteLine("str1 больше, чем str3");
 Console.WriteLine();
 
 //сравниваем строки без учета регистра
 result = String.Compare(str3,str4,true);
 if (result == 0) Console.WriteLine("str3 и str4 равны без учета регистра.");
 else Console.WriteLine("str3 и str4 не равны без учета регистра.");
 Console.WriteLine();
 
 //сравниваем части строк
 result = String.Compare(str1, 4, str2, 4, 2);
 if (result == 0)  Console.WriteLine("часть str1 и str2 равны");
 else  Console.WriteLine("часть str1 и str2 не равны");
 Console.WriteLine();
 
 // Поиск строк.
 idx = str2.IndexOf("строка");
 Console.WriteLine("Индекс первого вхождения подстроки сторка: " + idx);
 idx = str2.LastIndexOf("о");
 Console.WriteLine("Индекс последнего вхождения символа о: " + idx);

 //конкатенация
 string str=String.Concat(str1, str2, str3, str4);
 Console.WriteLine(str);
 
 //удаление подстроки
 str=str.Remove(0,str1.Length);
 Console.WriteLine(str);
 
 //замена подстроки "строка" на пустую подстроку
 str=str.Replace("строка","");
 Console.WriteLine(str);
}
Очень важными методами обработки строк, являются методы разделения строки на элементы Split и слияние массива строк в единую строку Join.
static void Main()
{
 string poems = "тучки небесные вечные странники";
 char[] div = { ' '}; //создаем массив разделителей
 // Разбиваем строку на части,
 string[] parts = poems.Split(div);
 Console.WriteLine("Результат разбиения строки на части: ");
 for (int i = 0; i < parts.Length; i++)
 Console.WriteLine(parts[i]);
 // Теперь собираем эти части в одну строку, в качестве разделителя используем символ |
 string whole = String.Join(" | ", parts);
 Console.WriteLine("Результат сборки: ");
 Console.WriteLine(whole);
}
Задание. Измените программу так, чтобы слова в предложении записывались в обратном порядке.
В общем случае строка может содержать и другие разделители:
static void Main()
{
 string poems = "Тучки небесные, вечные странники...";
 char[] div = { ' ', ',', '.'}; //создаем массив разделителей
 // Разбиваем строку на части,
 string[] parts = poems.Split(div);
 Console.WriteLine("Результат разбиения строки на части: ");
 for (int i = 0; i < parts.Length; i++)
 Console.WriteLine(parts[i]);
 // Теперь собираем эти части в одну строку,
 string whole = String.Join(" | ", parts);
 Console.WriteLine("Результат сборки: ");
 Console.WriteLine(whole);
}
Задания. 
1.	Объясните, почему в массиве строк parts появились пустые строки. 
2.	Внесите изменения в программу так, чтобы пустых строк не было. 
Рассмотрим другой пример - используя метод Split вводить двумерный массив можно не поэлементно, а построчно:
static void Main()
{
 try
 {
  int[][] MyArray;
  Console.Write("введите количество строк: ");
  int n = int.Parse(Console.ReadLine());
  MyArray = new int[n][];
  for (int i = 0; i < MyArray.Length; i++)
  {
   string line = Console.ReadLine();
   string[] mas = line.Split(' ');
   MyArray[i] = new int[mas.Length];
   for (int j = 0; j < MyArray[i].Length; j++)
   {
    MyArray[i][j] = int.Parse(mas[j]);
   }
  }
  PrintArray("исходный массив:", MyArray);
  for (int i = 0; i < MyArray.Length; i++) Array.Sort(MyArray[i]);
  PrintArray("итоговый массив", MyArray);
 }
 catch 
 {
  Console.WriteLine("возникло исключение");
 }
}
 
static void PrintArray(string a, int[][] mas)
{
 Console.WriteLine(a);
 for (int i = 0; i < mas.Length; i++)
 {
  foreach (int x in mas[i]) Console.Write("{0} ", x);
  Console.WriteLine();
 }
}
В этом примере могут возникнуть исключительные ситуации, если введенная строка элементов массива будет содержать лишние пробелы. Следовательно, от этих пробелов нужно избавиться:
static void Main()
{
 try
 {
  int[][] MyArray;
  Console.Write("введите количество строк: ");
  string line= Console.ReadLine()
  int n = int.Parse(line.Trim());
  MyArray = new int[n][];
  for (int i = 0; i < MyArray.Length; i++)
  {
   line = Console.ReadLine();
   line=line.Trim();	//удалаяем пробелы в начале и конце строки 
   //удаляем линшие пробелы внутри строки 
   n = line.IndexOf("  ");
   while (n > 0)
   {
    line = line.Remove(n, 1);
    n = line.IndexOf("  ");
   }          
   string[] mas = line.Split(' ');
   MyArray[i] = new int[mas.Length];
   for (int j = 0; j < MyArray[i].Length; j++)
   {
    MyArray[i][j] = int.Parse(mas[j]);
   }
  }
  PrintArray("исходный массив:", MyArray);
  for (int i = 0; i < MyArray.Length; i++) Array.Sort(MyArray[i]);
  PrintArray("итоговый массив", MyArray);
 }
 catch 
 {
  Console.WriteLine("возникло исключение");
 }
}
 
static void PrintArray(string a, int[][] mas)
{
 Console.WriteLine(a);
 for (int i = 0; i < mas.Length; i++)
 {
  foreach (int x in mas[i]) Console.Write("{0} ", x);
  Console.WriteLine();
 }
}
Задание. Объясните, можно ли удалить внутри строки лишние пробелы, используя метод Replace. Например, следующим способом str.Replace(" ", " "), где мы пытаемся заменить подстроку состоящую из двух, на подстроку из одиного пробела.
При работе с объектами класса string нужно учитывать их свойство неизменяемости, т.е. тот факт, что методы изменяют не сами строки, а их копии. Рассмотрим фрагмент программы:
 string a="";
 for (int i = 1; i <= 100; i++) a +="!";
 Console.WriteLine(a);
В этом случае в памяти компьютера будет сформировано 100 различных строк вида:
!
!!
!!!
…
!!!...!! 
И только последняя строка будет храниться в переменной а. Ссылки на все остальные строчки будут потеряны, но эти строки будут храниться в памяти компьютера и засорять память. Боротся с таким засорением придется сборщику мусора, что будет сказываться на производительности программы. Поэтому если нужно изменять строку, то лучше пользоваться классом StringBuilder. 
9.3 Изменяемые строки
Чтобы создать строку, которую можно изменять, в С# предусмотрен класс StringBuilder, определенный в пространстве имен System.Text. Объекты этого класса всегда объявляются с явным вызовом конструктора класса (через операцию new) . Примеры создания изменяемых строк:
StringBuilder a =new StringBuilder();	//создание пустой строки, размер по умолчанию 16 символов
//инициализация строки и выделение необходимой памяти
StringBuilder b = new StringBuilder("abcd"); 
//создание пустой строки и выделение памяти под 100 символов
StringBuilder с = new StringBuilder(100);
//инициализация строки и выделение памяти под 100 символов 
StringBuilder d = new StringBuilder("abcd", 100);
//инициализация подстрокой "bcd", и выделение памяти под 100 символов	
StringBuilder d = new StringBuilder("abcd", 1, 3,100);  
Основные элементы класса приведены в таблице:
Название	Вид	Описание
Append	Экземплярный метод	Добавление данных в конец строки. Разные варианты метода позволяют добавлять в строку величины любых встроенных типов, массивы символов, строки и подстроки string.
AppendFormat	Экземплярный метод	Добавление форматированной строки в конец строки
Capacity	свойство	Получение и установка емкости буфера. Если устанавливаемое значение меньше текущей длины строки или больше максимального, то генерируется исключение ArgumentOutOfRangeException
Insert	Экземплярный метод	Вставка подстроки в заданную позицию
Length	изменяемое свойство	Возвращает длину строки. Присвоение ему значения 0 сбрасывает содержимое и очищает строку
MaxCapacity	неизменное свойство	Возвращает наибольшее количество символов, которое может быть размещено в строке
Remove	Экземплярный метод	Удаление подстроки из заданной позиции
Replace	Экземплярный метод	Замена всех вхождений заданной подстроки или символа новой подстрокой или символом
ToString	Экземплярный метод 	Преобразование в строку типа string
Chars	изменяемое свойство	Возвращает из массива или устанавливает в массиве символ с заданным индексом. Вместо него можно пользоваться квадратными скобками []
Equals	Экземплярный метод	Возвращает true, только если объекты имеют одну и ту же длину и состоят из одних и тех же символов
CopyTo	Экземплярный метод	Копирует подмножество символов строки в массив char
Как видим, методы класса StringBuilder менее развиты, чем методы класса String, но они позволяют более эффективно использовать память за счет работы с изменяемыми строками. Рассмотрим примеры использования данных методов.
static void Main()
{
 try
 { 
  StringBuilder str=new StringBuilder("Площадь");
  PrintString(str);
  str.Append(" треугольника равна");	
  PrintString(str);
  str.AppendFormat(" {0:f2} см ", 123.456);	
  PrintString(str);
  str.Insert(8, "данного ");
  PrintString(str);
  str.Remove(7, 21);
  PrintString(str);
  str.Replace("а", "о");
  PrintString(str);
  StringBuilder str1=new StringBuilder(Console.ReadLine());
  StringBuilder str2=new StringBuilder(Console.ReadLine());
  Console.WriteLine(str1.Equals(str2));
 }
 catch 
 {
 	Console.WriteLine("Вознико исключение");
 }
}

static void PrintString(StringBuilder a)
{
 Console.WriteLine("Строка: "+a);
 Console.WriteLine("Текущая длина строки " +a.Length);
 Console.WriteLine("Объем буфера "+a.Capacity);
 Console.WriteLine("Максимальный объем буфера "+a.MaxCapacity);
 Console.WriteLine();
}
Задание. Самостоятельно изучите метод CopyTo.
С изменяемой строкой можно работать не только как с объектом, но как с массивом символов:
static void Main()
{
 StringBuilder a = new StringBuilder("2*3=3*2");
 Console.WriteLine(a);
 int k=0;
 for (int i = 0; i < a.Length; ++i )
 if (char.IsDigit(a[i])) k+=int.Parse(a[i].ToString());
 Console.WriteLine(k);
}
На практике часто комбинируют работу с изменяемыми и неизменяемыми строками. Однако если необходимо изменять строку, то в этом случае используют StringBuilder.
Пример. Дана строка, в которой содержится осмысленное текстовое сообщение. Слова сообщения разделяются пробелами и знаками препинания. Вывести все слова сообщения, которые начинаются и заканчиваются на одну и ту же букву.
static void Main()
{
 Console.WriteLine("Введите строку: ");
 StringBuilder a = new StringBuilder(Console.ReadLine());
 Console.WriteLine("Исходная строка: "+a);
 for (int i=0; i<a.Length;)
 if (char.IsPunctuation(a[i])) a.Remove(i,1);
 else ++i;
 string str=a.ToString();
 string []s=str.Split(' ');
 Console.WriteLine("Искомые слова: ");
 for (int i=0; i<s.Length; ++i)
 if (s[i][0]==s[i][s.Length-1]) Console.WriteLine(s[i]);
}
Задание. Измените программу так, чтобы она корректно работала и для случая, когда в исходной строке встречаются лишние пробелы.
Практикум
Замечание. При решении задач следует руководствоваться правилом: если в строке должны производится изменения, то лучше пользоваться классом StringBuilder; если необходимо разбивать строки на слова, то классом String. При решении некоторых задач, потребуется использовать оба класса. 
1.	Разработать программу, которая для заданной строки s вставляет символ x после каждого вхождения символа y; 
using System;
using System.Text;

namespace ConsoleApplication
{
 class Class
 {
  static void Main()
  {
   Console.WriteLine("Введите строку: ");
   StringBuilder a = new StringBuilder(Console.ReadLine());
   Console.WriteLine("Исходная строка: "+a);
   Console.WriteLine("Введите символ x: ");
   char x=char.Parse(Console.ReadLine());
   Console.WriteLine("Введите символ y: ");
   char y=char.Parse(Console.ReadLine());
   for (int i=0; i<a.Length; ++i)
    if (a[i]==x){a.Insert(i+1,y); ++i;}
   Console.WriteLine("Измененная строка: "+a);
   }
 }
}
 
2.	Дана строка, в которой содержится осмысленное текстовое сообщение. Слова сообщения разделяются пробелами и знаками препинания. Вывести только те слова сообщения, в которых содержится заданная подстрока. 
using System;
using System.Text;

namespace ConsoleApplication
{
 class Class
 {
  static void Main()
  {
   Console.WriteLine("Введите строку: ");
   StringBuilder a = new StringBuilder(Console.ReadLine());
   Console.WriteLine("Исходная строка: "+a);
   Console.WriteLine("Введите заданную подстроку: ");
   string x=Console.ReadLine();
   for (int i=0; i<a.Length;)
    if (char.IsPunctuation(a[i]))a.Remove(i,1);
    else ++i;
   string str=a.ToString();
   str=str.Trim();
   string []s=str.Split(' ');
   Console.WriteLine("Искомые слова: ");
   for (int i=0; i<s.Length; ++i)
    if (s[i].IndexOf(x)!=-1) Console.WriteLine(s[i]);
  }
 }
}
Самостоятельная работа. Работа с командной строкой.
Компиляция программы из командной строки
1.	Создайте новый проект или откройте старый, который выводит на экран сообщение: 
2.	"Привет!"
3.	Сохраните исходный текст программы на диск D в папку Temp c именем Program.cs 
Вариант 1
1.	Выполните последовательность действий: Пуск - Все программы - Microsoft Visual Studio 2005 - Visual Studio 2005 Tools - Visual Studio 2005 Command Prompt 
2.	Откроется консольное окно: 
 
Вариант 2
1.	Выполните последовательность действий: Пуск - Все программы - Microsoft .Net Framwork SDK v2.0 - SDK Command Prompt 
2.	Откроется консольное окно: 
 
Замечание. Далее мы будем работать с командным окном SDK Command Prompt
3.	В командной строке окна запишите следующую команду: 
4.	csc  /out:d:\temp\hello.exe  d:\temp\Program.cs
где csc - команда компиляции исполняемого файла
/out - определяет местоположение и название скомпилированного файла, в нашем случае исполняемый файл называется hello.exe и будет располагаться в папке temp диска d.
d:\temp\Program.cs - определяет местоположение и название исходного файла.
5.	Для выполнения команды нажмите клавишу Enter: 
 
Замечание. В данном случае компиляция прошла успешно. В противном случае на экране будет выведено сообщение о том, по какой причине компиляция не возможна. Наиболее часто пользователь неверно указывает путь к файлам или допускает ошибку в имени исходного файла. 
Запуск программы из командной строки
В командной строке SDK Commond Prompt указать полный путь к файлу, например, d:\temp\hello.exe и нажать клавишу Enter.
В нашем случае консольное окно примет вид:
